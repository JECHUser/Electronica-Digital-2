

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 23:16:36 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0088                     	;# 
   265  0089                     	;# 
   266  008C                     	;# 
   267  008D                     	;# 
   268  008E                     	;# 
   269  008F                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  0105                     	;# 
   289  0107                     	;# 
   290  0108                     	;# 
   291  0109                     	;# 
   292  010C                     	;# 
   293  010C                     	;# 
   294  010D                     	;# 
   295  010E                     	;# 
   296  010F                     	;# 
   297  0185                     	;# 
   298  0187                     	;# 
   299  0188                     	;# 
   300  0189                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000E                     	;# 
   319  000F                     	;# 
   320  0010                     	;# 
   321  0011                     	;# 
   322  0012                     	;# 
   323  0013                     	;# 
   324  0014                     	;# 
   325  0015                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  0081                     	;# 
   339  0085                     	;# 
   340  0086                     	;# 
   341  0087                     	;# 
   342  0088                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  008F                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  009F                     	;# 
   366  0105                     	;# 
   367  0107                     	;# 
   368  0108                     	;# 
   369  0109                     	;# 
   370  010C                     	;# 
   371  010C                     	;# 
   372  010D                     	;# 
   373  010E                     	;# 
   374  010F                     	;# 
   375  0185                     	;# 
   376  0187                     	;# 
   377  0188                     	;# 
   378  0189                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  000E                     	;# 
   397  000F                     	;# 
   398  0010                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0013                     	;# 
   402  0014                     	;# 
   403  0015                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  001D                     	;# 
   414  001E                     	;# 
   415  001F                     	;# 
   416  0081                     	;# 
   417  0085                     	;# 
   418  0086                     	;# 
   419  0087                     	;# 
   420  0088                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459                           
   460                           	psect	strings
   461  0449                     __pstrings:
   462  0449                     stringtab:
   463  0449                     __stringtab:
   464                           
   465                           ;	String table - string pointers are 1 byte each
   466  0449  1BFF               	btfsc	btemp+1,7
   467  044A  2C53               	ljmp	stringcode
   468  044B  1383               	bcf	3,7
   469  044C  187F               	btfsc	btemp+1,0
   470  044D  1783               	bsf	3,7
   471  044E  0800               	movf	0,w
   472  044F  0A84               	incf	4,f
   473  0450  1903               	skipnz
   474  0451  0AFF               	incf	btemp+1,f
   475  0452  0008               	return
   476  0453                     stringcode:
   477  0453                     stringdir:
   478  0453  3004               	movlw	high stringdir
   479  0454  008A               	movwf	10
   480  0455  0804               	movf	4,w
   481  0456  0A84               	incf	4,f
   482  0457  0782               	addwf	2,f
   483  0458                     __stringbase:
   484  0458  3400               	retlw	0
   485  0459                     __end_of__stringtab:
   486  0459                     _dpowers:
   487  0459  3401               	retlw	1
   488  045A  3400               	retlw	0
   489  045B  340A               	retlw	10
   490  045C  3400               	retlw	0
   491  045D  3464               	retlw	100
   492  045E  3400               	retlw	0
   493  045F  34E8               	retlw	232
   494  0460  3403               	retlw	3
   495  0461  3410               	retlw	16
   496  0462  3427               	retlw	39
   497  0463                     __end_of_dpowers:
   498  0014                     _SSPCON	set	20
   499  000B                     _INTCONbits	set	11
   500  0013                     _SSPBUF	set	19
   501  000B                     _INTCON	set	11
   502  0008                     _PORTD	set	8
   503  0006                     _PORTB	set	6
   504  0006                     _PORTBbits	set	6
   505  0049                     _RE1	set	73
   506  0048                     _RE0	set	72
   507  0047                     _RD7	set	71
   508  0046                     _RD6	set	70
   509  0045                     _RD5	set	69
   510  0044                     _RD4	set	68
   511  0043                     _RD3	set	67
   512  0042                     _RD2	set	66
   513  0041                     _RD1	set	65
   514  0040                     _RD0	set	64
   515  0094                     _SSPSTAT	set	148
   516  008C                     _PIE1bits	set	140
   517  0087                     _TRISCbits	set	135
   518  0094                     _SSPSTATbits	set	148
   519  0089                     _TRISE	set	137
   520  0088                     _TRISD	set	136
   521  0086                     _TRISB	set	134
   522  043B                     _TRISC3	set	1083
   523  043D                     _TRISC5	set	1085
   524  0189                     _ANSELH	set	393
   525  0188                     _ANSEL	set	392
   526  0463                     STR_4:
   527  0463  3425               	retlw	37	;'%'
   528  0464  3431               	retlw	49	;'1'
   529  0465  3469               	retlw	105	;'i'
   530  0466  342E               	retlw	46	;'.'
   531  0467  3425               	retlw	37	;'%'
   532  0468  3431               	retlw	49	;'1'
   533  0469  3469               	retlw	105	;'i'
   534  046A  3400               	retlw	0
   535  046B                     STR_1:
   536  046B  3453               	retlw	83	;'S'
   537  046C  3431               	retlw	49	;'1'
   538  046D  343A               	retlw	58	;':'
   539  046E  3400               	retlw	0
   540  046F                     STR_2:
   541  046F  3453               	retlw	83	;'S'
   542  0470  3432               	retlw	50	;'2'
   543  0471  343A               	retlw	58	;':'
   544  0472  3400               	retlw	0
   545  0473                     STR_3:
   546  0473  3453               	retlw	83	;'S'
   547  0474  3433               	retlw	51	;'3'
   548  0475  343A               	retlw	58	;':'
   549  0476  3400               	retlw	0
   550  0477                     STR_5:
   551  0477  3425               	retlw	37	;'%'
   552  0478  3433               	retlw	51	;'3'
   553  0479  3469               	retlw	105	;'i'
   554  047A  3400               	retlw	0
   555  0477                     
   556                           	psect	cinit
   557  000F                     start_initialization:	
   558                           ; #config settings
   559                           
   560  000F                     __initialization:
   561                           
   562                           ; Clear objects allocated to COMMON
   563  000F  01FB               	clrf	__pbssCOMMON& (0+127)
   564                           
   565                           ; Clear objects allocated to BANK0
   566  0010  1383               	bcf	3,7	;select IRP bank0
   567  0011  303A               	movlw	low __pbssBANK0
   568  0012  0084               	movwf	4
   569  0013  3052               	movlw	low (__pbssBANK0+24)
   570  0014  120A  118A  253C  120A  118A  	fcall	clear_ram0
   571  0019                     end_of_initialization:	
   572                           ;End of C runtime variable initialization code
   573                           
   574  0019                     __end_of__initialization:
   575  0019  0183               	clrf	3
   576  001A  120A  118A  2A56   	ljmp	_main	;jump to C main() function
   577                           
   578                           	psect	bssCOMMON
   579  007B                     __pbssCOMMON:
   580  007B                     _S1:
   581  007B                     	ds	1
   582                           
   583                           	psect	bssBANK0
   584  003A                     __pbssBANK0:
   585  003A                     _decima:
   586  003A                     	ds	2
   587  003C                     _entero:
   588  003C                     	ds	2
   589  003E                     _a:
   590  003E                     	ds	2
   591  0040                     _S3:
   592  0040                     	ds	1
   593  0041                     _S2:
   594  0041                     	ds	1
   595  0042                     _s:
   596  0042                     	ds	16
   597                           
   598                           	psect	clrtext
   599  053C                     clear_ram0:	
   600                           ;	Called with FSR containing the base address, and
   601                           ;	W with the last address+1
   602                           
   603  053C  0064               	clrwdt	;clear the watchdog before getting into this loop
   604  053D                     clrloop0:
   605  053D  0180               	clrf	0	;clear RAM location pointed to by FSR
   606  053E  0A84               	incf	4,f	;increment pointer
   607  053F  0604               	xorwf	4,w	;XOR with final address
   608  0540  1903               	btfsc	3,2	;have we reached the end yet?
   609  0541  3400               	retlw	0	;all done for this memory range, return
   610  0542  0604               	xorwf	4,w	;XOR again to restore value
   611  0543  2D3D               	goto	clrloop0	;do the next byte
   612                           
   613                           	psect	cstackCOMMON
   614  0070                     __pcstackCOMMON:
   615  0070                     ?_isdigit:
   616  0070                     ?_setup:	
   617                           ; 1 bit 
   618                           
   619  0070                     ?_Lcd_Init:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_spiWrite:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_spiRead:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_adc_to_5V:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_mostrar:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_isr:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ??_isr:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_main:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_Lcd_Port:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_Lcd_Cmd:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_Lcd_Write_Char:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_spiReceiveWait:	
   653                           ; 1 bytes @ 0x0
   654                           
   655                           
   656                           ; 1 bytes @ 0x0
   657  0070                     	ds	2
   658  0072                     ??_setup:
   659  0072                     ?_spiInit:	
   660                           ; 1 bytes @ 0x2
   661                           
   662  0072                     ??_spiWrite:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  0072                     ??_spiRead:	
   666                           ; 1 bytes @ 0x2
   667                           
   668  0072                     ??_adc_to_5V:	
   669                           ; 1 bytes @ 0x2
   670                           
   671  0072                     ??_isdigit:	
   672                           ; 1 bytes @ 0x2
   673                           
   674  0072                     ??_Lcd_Port:	
   675                           ; 1 bytes @ 0x2
   676                           
   677  0072                     ??_spiReceiveWait:	
   678                           ; 1 bytes @ 0x2
   679                           
   680  0072                     ?___wmul:	
   681                           ; 1 bytes @ 0x2
   682                           
   683  0072                     ?___lwdiv:	
   684                           ; 2 bytes @ 0x2
   685                           
   686  0072                     Lcd_Port@a:	
   687                           ; 2 bytes @ 0x2
   688                           
   689  0072                     spiInit@sDataSample:	
   690                           ; 1 bytes @ 0x2
   691                           
   692  0072                     spiWrite@dat:	
   693                           ; 1 bytes @ 0x2
   694                           
   695  0072                     _isdigit$921:	
   696                           ; 1 bytes @ 0x2
   697                           
   698  0072                     ___wmul@multiplier:	
   699                           ; 1 bytes @ 0x2
   700                           
   701  0072                     ___lwdiv@divisor:	
   702                           ; 2 bytes @ 0x2
   703                           
   704                           
   705                           ; 2 bytes @ 0x2
   706  0072                     	ds	1
   707  0073                     ??_Lcd_Cmd:
   708  0073                     ??_Lcd_Write_Char:	
   709                           ; 1 bytes @ 0x3
   710                           
   711  0073                     spiInit@sClockIdle:	
   712                           ; 1 bytes @ 0x3
   713                           
   714  0073                     isdigit@c:	
   715                           ; 1 bytes @ 0x3
   716                           
   717                           
   718                           ; 1 bytes @ 0x3
   719  0073                     	ds	1
   720  0074                     Lcd_Write_Char@a:
   721  0074                     spiInit@sTransmitEdge:	
   722                           ; 1 bytes @ 0x4
   723                           
   724  0074                     ___wmul@multiplicand:	
   725                           ; 1 bytes @ 0x4
   726                           
   727  0074                     ___lwdiv@dividend:	
   728                           ; 2 bytes @ 0x4
   729                           
   730                           
   731                           ; 2 bytes @ 0x4
   732  0074                     	ds	1
   733  0075                     ??_spiInit:
   734  0075                     ?_Lcd_Write_String:	
   735                           ; 1 bytes @ 0x5
   736                           
   737  0075                     Lcd_Cmd@a:	
   738                           ; 1 bytes @ 0x5
   739                           
   740  0075                     spiInit@sType:	
   741                           ; 1 bytes @ 0x5
   742                           
   743  0075                     Lcd_Write_String@a:	
   744                           ; 1 bytes @ 0x5
   745                           
   746                           
   747                           ; 2 bytes @ 0x5
   748  0075                     	ds	1
   749  0076                     ??_Lcd_Init:
   750  0076                     ?_Lcd_Set_Cursor:	
   751                           ; 1 bytes @ 0x6
   752                           
   753  0076                     ??___wmul:	
   754                           ; 1 bytes @ 0x6
   755                           
   756  0076                     ??___lwdiv:	
   757                           ; 1 bytes @ 0x6
   758                           
   759  0076                     Lcd_Set_Cursor@b:	
   760                           ; 1 bytes @ 0x6
   761                           
   762  0076                     ___wmul@product:	
   763                           ; 1 bytes @ 0x6
   764                           
   765                           
   766                           ; 2 bytes @ 0x6
   767  0076                     	ds	1
   768  0077                     ??_Lcd_Set_Cursor:
   769  0077                     ??_Lcd_Write_String:	
   770                           ; 1 bytes @ 0x7
   771                           
   772  0077                     ___lwdiv@quotient:	
   773                           ; 1 bytes @ 0x7
   774                           
   775                           
   776                           ; 2 bytes @ 0x7
   777  0077                     	ds	1
   778  0078                     Lcd_Set_Cursor@a:
   779                           
   780                           ; 1 bytes @ 0x8
   781  0078                     	ds	1
   782  0079                     Lcd_Set_Cursor@temp:
   783  0079                     ___lwdiv@counter:	
   784                           ; 1 bytes @ 0x9
   785                           
   786                           
   787                           ; 1 bytes @ 0x9
   788  0079                     	ds	1
   789  007A                     ??___lwmod:
   790                           
   791                           ; 1 bytes @ 0xA
   792  007A                     	ds	1
   793                           
   794                           	psect	cstackBANK0
   795  0020                     __pcstackBANK0:
   796  0020                     ?___lwmod:
   797  0020                     Lcd_Write_String@i:	
   798                           ; 2 bytes @ 0x0
   799                           
   800  0020                     ___lwmod@divisor:	
   801                           ; 2 bytes @ 0x0
   802                           
   803                           
   804                           ; 2 bytes @ 0x0
   805  0020                     	ds	2
   806  0022                     ___lwmod@dividend:
   807                           
   808                           ; 2 bytes @ 0x2
   809  0022                     	ds	2
   810  0024                     ___lwmod@counter:
   811                           
   812                           ; 1 bytes @ 0x4
   813  0024                     	ds	1
   814  0025                     ?_sprintf:
   815  0025                     sprintf@f:	
   816                           ; 2 bytes @ 0x5
   817                           
   818                           
   819                           ; 1 bytes @ 0x5
   820  0025                     	ds	5
   821  002A                     ??_sprintf:
   822                           
   823                           ; 1 bytes @ 0xA
   824  002A                     	ds	3
   825  002D                     sprintf@ap:
   826                           
   827                           ; 1 bytes @ 0xD
   828  002D                     	ds	1
   829  002E                     sprintf@prec:
   830                           
   831                           ; 1 bytes @ 0xE
   832  002E                     	ds	1
   833  002F                     sprintf@flag:
   834                           
   835                           ; 1 bytes @ 0xF
   836  002F                     	ds	1
   837  0030                     sprintf@val:
   838                           
   839                           ; 2 bytes @ 0x10
   840  0030                     	ds	2
   841  0032                     sprintf@width:
   842                           
   843                           ; 2 bytes @ 0x12
   844  0032                     	ds	2
   845  0034                     sprintf@sp:
   846                           
   847                           ; 1 bytes @ 0x14
   848  0034                     	ds	1
   849  0035                     sprintf@c:
   850                           
   851                           ; 1 bytes @ 0x15
   852  0035                     	ds	1
   853  0036                     ??_mostrar:
   854                           
   855                           ; 1 bytes @ 0x16
   856  0036                     	ds	3
   857  0039                     ??_main:
   858                           
   859                           ; 1 bytes @ 0x19
   860  0039                     	ds	1
   861                           
   862                           	psect	maintext
   863  0256                     __pmaintext:	
   864 ;;
   865 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   866 ;;
   867 ;; *************** function _main *****************
   868 ;; Defined at:
   869 ;;		line 91 in file "mcu1_master.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;		None
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : B00/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   883 ;;      Params:         0       0       0       0       0
   884 ;;      Locals:         0       0       0       0       0
   885 ;;      Temps:          0       1       0       0       0
   886 ;;      Totals:         0       1       0       0       0
   887 ;;Total ram usage:        1 bytes
   888 ;; Hardware stack levels required when called:    5
   889 ;; This function calls:
   890 ;;		_Lcd_Init
   891 ;;		_adc_to_5V
   892 ;;		_mostrar
   893 ;;		_setup
   894 ;;		_spiInit
   895 ;;		_spiRead
   896 ;;		_spiWrite
   897 ;; This function is called by:
   898 ;;		Startup code after reset
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _main
   904  0256                     _main:
   905  0256                     l1797:	
   906                           ;incstack = 0
   907                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   908                           
   909                           
   910                           ;mcu1_master.c: 92:     Lcd_Write_String("S3:");
   911  0256  120A  118A  24DE  120A  118A  	fcall	_setup
   912                           
   913                           ;mcu1_master.c: 93:     sprintf(s, "%1i.%1i", entero, decima);
   914  025B  120A  118A  22C3  120A  118A  	fcall	_Lcd_Init
   915                           
   916                           ;mcu1_master.c: 94:     Lcd_Set_Cursor(2, 1);
   917  0260  01F2               	clrf	spiInit@sDataSample
   918  0261  01F3               	clrf	spiInit@sClockIdle
   919  0262  01F4               	clrf	spiInit@sTransmitEdge
   920  0263  3020               	movlw	32
   921  0264  120A  118A  24F5  120A  118A  	fcall	_spiInit
   922  0269                     l1799:
   923                           
   924                           ;mcu1_master.c: 102: }
   925  0269  1283               	bcf	3,5	;RP0=0, select bank0
   926  026A  1303               	bcf	3,6	;RP1=0, select bank0
   927  026B  1006               	bcf	6,0	;volatile
   928                           
   929                           ;mcu1_master.c: 103: 
   930  026C  3000               	movlw	0
   931  026D  120A  118A  2552  120A  118A  	fcall	_spiWrite
   932                           
   933                           ;mcu1_master.c: 104: void adc_to_5V(void) {
   934  0272  120A  118A  2533  120A  118A  	fcall	_spiRead
   935  0277  1283               	bcf	3,5	;RP0=0, select bank0
   936  0278  1303               	bcf	3,6	;RP1=0, select bank0
   937  0279  00B9               	movwf	??_main
   938  027A  0839               	movf	??_main,w
   939  027B  00FB               	movwf	_S1
   940  027C                     l1801:
   941                           
   942                           ;mcu1_master.c: 105: 
   943  027C  1406               	bsf	6,0	;volatile
   944                           
   945                           ;mcu1_master.c: 106: 
   946  027D  120A  118A  2412  120A  118A  	fcall	_adc_to_5V
   947  0282                     l1803:
   948                           
   949                           ;mcu1_master.c: 107:     if (S1 > 250) {
   950  0282  120A  118A  21A5  120A  118A  	fcall	_mostrar
   951  0287                     l1805:
   952                           
   953                           ;mcu1_master.c: 109:         decima = 0;
   954  0287  1283               	bcf	3,5	;RP0=0, select bank0
   955  0288  1303               	bcf	3,6	;RP1=0, select bank0
   956  0289  1086               	bcf	6,1	;volatile
   957  028A                     l1807:
   958                           
   959                           ;mcu1_master.c: 110:     } else {
   960  028A  3000               	movlw	0
   961  028B  120A  118A  2552  120A  118A  	fcall	_spiWrite
   962  0290                     l1809:
   963                           
   964                           ;mcu1_master.c: 111: 
   965  0290  120A  118A  2533  120A  118A  	fcall	_spiRead
   966  0295  1283               	bcf	3,5	;RP0=0, select bank0
   967  0296  1303               	bcf	3,6	;RP1=0, select bank0
   968  0297  00B9               	movwf	??_main
   969  0298  0839               	movf	??_main,w
   970  0299  00C1               	movwf	_S2
   971  029A                     l1811:
   972                           
   973                           ;mcu1_master.c: 112:         while (S1 >= 50) {
   974  029A  1486               	bsf	6,1	;volatile
   975  029B                     l1813:
   976                           
   977                           ;mcu1_master.c: 113:             S1 = S1 - 50;
   978  029B  120A  118A  21A5  120A  118A  	fcall	_mostrar
   979  02A0                     l1815:
   980                           
   981                           ;mcu1_master.c: 115:         }
   982  02A0  1283               	bcf	3,5	;RP0=0, select bank0
   983  02A1  1303               	bcf	3,6	;RP1=0, select bank0
   984  02A2  1106               	bcf	6,2	;volatile
   985                           
   986                           ;mcu1_master.c: 116:         while (S1 >= 5) {
   987  02A3  3000               	movlw	0
   988  02A4  120A  118A  2552  120A  118A  	fcall	_spiWrite
   989                           
   990                           ;mcu1_master.c: 117:             S1 = S1 - 5;
   991  02A9  120A  118A  2533  120A  118A  	fcall	_spiRead
   992  02AE  1283               	bcf	3,5	;RP0=0, select bank0
   993  02AF  1303               	bcf	3,6	;RP1=0, select bank0
   994  02B0  00B9               	movwf	??_main
   995  02B1  0839               	movf	??_main,w
   996  02B2  00C0               	movwf	_S3
   997  02B3                     l1817:
   998                           
   999                           ;mcu1_master.c: 118:             decima++;
  1000  02B3  1506               	bsf	6,2	;volatile
  1001  02B4                     l1819:
  1002                           
  1003                           ;mcu1_master.c: 119:         }
  1004  02B4  120A  118A  21A5  120A  118A  	fcall	_mostrar
  1005  02B9                     l1821:
  1006                           
  1007                           ;mcu1_master.c: 121: }
  1008  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1009  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1010  02BB  01BC               	clrf	_entero
  1011  02BC  01BD               	clrf	_entero+1
  1012  02BD                     l1823:
  1013  02BD  01BA               	clrf	_decima
  1014  02BE  01BB               	clrf	_decima+1
  1015  02BF  2A69               	goto	l1799
  1016  02C0  120A  118A  280C   	ljmp	start
  1017  02C3                     __end_of_main:
  1018                           
  1019                           	psect	text1
  1020  0552                     __ptext1:	
  1021 ;; *************** function _spiWrite *****************
  1022 ;; Defined at:
  1023 ;;		line 34 in file "spi.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  dat             1    wreg     unsigned char 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  dat             1    2[COMMON] unsigned char 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1037 ;;      Params:         0       0       0       0       0
  1038 ;;      Locals:         1       0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0
  1040 ;;      Totals:         1       0       0       0       0
  1041 ;;Total ram usage:        1 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; Hardware stack levels required when called:    1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           
  1052                           ;psect for function _spiWrite
  1053  0552                     _spiWrite:
  1054                           
  1055                           ;incstack = 0
  1056                           ; Regs used in _spiWrite: [wreg]
  1057                           ;spiWrite@dat stored from wreg
  1058  0552  00F2               	movwf	spiWrite@dat
  1059  0553                     l1495:
  1060                           
  1061                           ;spi.c: 34: void spiWrite(char dat);spi.c: 35: {;spi.c: 36:     SSPBUF = dat;
  1062  0553  0872               	movf	spiWrite@dat,w
  1063  0554  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0555  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0556  0093               	movwf	19	;volatile
  1066  0557                     l205:
  1067  0557  0008               	return
  1068  0558                     __end_of_spiWrite:
  1069                           
  1070                           	psect	text2
  1071  0533                     __ptext2:	
  1072 ;; *************** function _spiRead *****************
  1073 ;; Defined at:
  1074 ;;		line 47 in file "spi.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      unsigned char 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0, pclath, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1088 ;;      Params:         0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0
  1091 ;;      Totals:         0       0       0       0       0
  1092 ;;Total ram usage:        0 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    2
  1095 ;; This function calls:
  1096 ;;		_spiReceiveWait
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           
  1103                           ;psect for function _spiRead
  1104  0533                     _spiRead:
  1105  0533                     l1497:	
  1106                           ;incstack = 0
  1107                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1108                           
  1109                           
  1110                           ;spi.c: 49:     spiReceiveWait();
  1111  0533  120A  118A  2544  120A  118A  	fcall	_spiReceiveWait
  1112  0538                     l1499:
  1113                           
  1114                           ;spi.c: 50:     return(SSPBUF);
  1115  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1116  0539  1303               	bcf	3,6	;RP1=0, select bank0
  1117  053A  0813               	movf	19,w	;volatile
  1118  053B                     l213:
  1119  053B  0008               	return
  1120  053C                     __end_of_spiRead:
  1121                           
  1122                           	psect	text3
  1123  0544                     __ptext3:	
  1124 ;; *************** function _spiReceiveWait *****************
  1125 ;; Defined at:
  1126 ;;		line 29 in file "spi.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;		None
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;		None
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      void 
  1133 ;; Registers used:
  1134 ;;		None
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1140 ;;      Params:         0       0       0       0       0
  1141 ;;      Locals:         0       0       0       0       0
  1142 ;;      Temps:          0       0       0       0       0
  1143 ;;      Totals:         0       0       0       0       0
  1144 ;;Total ram usage:        0 bytes
  1145 ;; Hardware stack levels used:    1
  1146 ;; Hardware stack levels required when called:    1
  1147 ;; This function calls:
  1148 ;;		Nothing
  1149 ;; This function is called by:
  1150 ;;		_spiRead
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           
  1155                           ;psect for function _spiReceiveWait
  1156  0544                     _spiReceiveWait:
  1157  0544                     l1459:	
  1158                           ;incstack = 0
  1159                           ; Regs used in _spiReceiveWait: []
  1160                           
  1161  0544                     l199:	
  1162                           ;spi.c: 31:     while ( !SSPSTATbits.BF );
  1163                           
  1164  0544  1683               	bsf	3,5	;RP0=1, select bank1
  1165  0545  1303               	bcf	3,6	;RP1=0, select bank1
  1166  0546  1C14               	btfss	20,0	;volatile
  1167  0547  2D49               	goto	u991
  1168  0548  2D4A               	goto	u990
  1169  0549                     u991:
  1170  0549  2D44               	goto	l199
  1171  054A                     u990:
  1172  054A                     l202:
  1173  054A  0008               	return
  1174  054B                     __end_of_spiReceiveWait:
  1175                           
  1176                           	psect	text4
  1177  04F5                     __ptext4:	
  1178 ;; *************** function _spiInit *****************
  1179 ;; Defined at:
  1180 ;;		line 12 in file "spi.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  sType           1    wreg     enum E1264
  1183 ;;  sDataSample     1    2[COMMON] enum E1272
  1184 ;;  sClockIdle      1    3[COMMON] enum E1276
  1185 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  sType           1    5[COMMON] enum E1264
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1197 ;;      Params:         3       0       0       0       0
  1198 ;;      Locals:         1       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0
  1200 ;;      Totals:         4       0       0       0       0
  1201 ;;Total ram usage:        4 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    1
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           
  1212                           ;psect for function _spiInit
  1213  04F5                     _spiInit:
  1214                           
  1215                           ;incstack = 0
  1216                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1217                           ;spiInit@sType stored from wreg
  1218  04F5  00F5               	movwf	spiInit@sType
  1219  04F6                     l1485:
  1220                           
  1221                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
  1222  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  1223  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  1224  04F8  1287               	bcf	7,5	;volatile
  1225                           
  1226                           ;spi.c: 15:     if(sType & 0b00000100)
  1227  04F9  1D75               	btfss	spiInit@sType,2
  1228  04FA  2CFC               	goto	u1001
  1229  04FB  2CFD               	goto	u1000
  1230  04FC                     u1001:
  1231  04FC  2D01               	goto	l1491
  1232  04FD                     u1000:
  1233  04FD                     l1487:
  1234                           
  1235                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
  1236  04FD  0874               	movf	spiInit@sTransmitEdge,w
  1237  04FE  0094               	movwf	20	;volatile
  1238  04FF                     l1489:
  1239                           
  1240                           ;spi.c: 18:         TRISC3 = 1;
  1241  04FF  1587               	bsf	7,3	;volatile
  1242                           
  1243                           ;spi.c: 19:     }
  1244  0500  2D05               	goto	l195
  1245  0501                     l1491:
  1246                           
  1247                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1248  0501  0872               	movf	spiInit@sDataSample,w
  1249  0502  0474               	iorwf	spiInit@sTransmitEdge,w
  1250  0503  0094               	movwf	20	;volatile
  1251  0504                     l1493:
  1252                           
  1253                           ;spi.c: 23:         TRISC3 = 0;
  1254  0504  1187               	bcf	7,3	;volatile
  1255  0505                     l195:	
  1256                           ;spi.c: 24:     }
  1257                           
  1258                           
  1259                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
  1260  0505  0875               	movf	spiInit@sType,w
  1261  0506  0473               	iorwf	spiInit@sClockIdle,w
  1262  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0509  0094               	movwf	20	;volatile
  1265  050A                     l196:
  1266  050A  0008               	return
  1267  050B                     __end_of_spiInit:
  1268                           
  1269                           	psect	text5
  1270  04DE                     __ptext5:	
  1271 ;; *************** function _setup *****************
  1272 ;; Defined at:
  1273 ;;		line 130 in file "mcu1_master.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;		None
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1287 ;;      Params:         0       0       0       0       0
  1288 ;;      Locals:         0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0
  1290 ;;      Totals:         0       0       0       0       0
  1291 ;;Total ram usage:        0 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           
  1302                           ;psect for function _setup
  1303  04DE                     _setup:
  1304  04DE                     l1461:	
  1305                           ;incstack = 0
  1306                           ; Regs used in _setup: [wreg+status,2]
  1307                           
  1308  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  1309  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  1310  04E0  0186               	clrf	6	;volatile
  1311  04E1                     l1463:
  1312  04E1  3007               	movlw	7
  1313  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  1314  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  1315  04E4  0086               	movwf	6	;volatile
  1316  04E5                     l1465:
  1317  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  1318  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  1319  04E7  0188               	clrf	8	;volatile
  1320  04E8                     l1467:
  1321  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  1322  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  1323  04EA  0188               	clrf	8	;volatile
  1324  04EB                     l1469:
  1325  04EB  1683               	bsf	3,5	;RP0=1, select bank1
  1326  04EC  1303               	bcf	3,6	;RP1=0, select bank1
  1327  04ED  0189               	clrf	9	;volatile
  1328  04EE                     l1471:
  1329  04EE  1683               	bsf	3,5	;RP0=1, select bank3
  1330  04EF  1703               	bsf	3,6	;RP1=1, select bank3
  1331  04F0  0188               	clrf	8	;volatile
  1332  04F1                     l1473:
  1333  04F1  0189               	clrf	9	;volatile
  1334  04F2  30C0               	movlw	192
  1335  04F3  008B               	movwf	11	;volatile
  1336  04F4                     l68:
  1337  04F4  0008               	return
  1338  04F5                     __end_of_setup:
  1339                           
  1340                           	psect	text6
  1341  01A5                     __ptext6:	
  1342 ;; *************** function _mostrar *****************
  1343 ;; Defined at:
  1344 ;;		line 144 in file "mcu1_master.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;		None
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;		None
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1358 ;;      Params:         0       0       0       0       0
  1359 ;;      Locals:         0       0       0       0       0
  1360 ;;      Temps:          0       3       0       0       0
  1361 ;;      Totals:         0       3       0       0       0
  1362 ;;Total ram usage:        3 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    4
  1365 ;; This function calls:
  1366 ;;		_Lcd_Set_Cursor
  1367 ;;		_Lcd_Write_String
  1368 ;;		_sprintf
  1369 ;; This function is called by:
  1370 ;;		_main
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           
  1375                           ;psect for function _mostrar
  1376  01A5                     _mostrar:
  1377  01A5                     l1775:	
  1378                           ;incstack = 0
  1379                           ; Regs used in _mostrar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1380                           
  1381  01A5  01F6               	clrf	Lcd_Set_Cursor@b
  1382  01A6  0AF6               	incf	Lcd_Set_Cursor@b,f
  1383  01A7  3001               	movlw	1
  1384  01A8  120A  118A  24A0  120A  118A  	fcall	_Lcd_Set_Cursor
  1385  01AD                     l1777:
  1386  01AD  3013               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1387  01AE  00F5               	movwf	Lcd_Write_String@a
  1388  01AF  3080               	movlw	128
  1389  01B0  00F6               	movwf	Lcd_Write_String@a+1
  1390  01B1  120A  118A  230E  120A  118A  	fcall	_Lcd_Write_String
  1391  01B6                     l1779:
  1392  01B6  3007               	movlw	7
  1393  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1394  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1395  01B9  00B6               	movwf	??_mostrar
  1396  01BA  0836               	movf	??_mostrar,w
  1397  01BB  00F6               	movwf	Lcd_Set_Cursor@b
  1398  01BC  3001               	movlw	1
  1399  01BD  120A  118A  24A0  120A  118A  	fcall	_Lcd_Set_Cursor
  1400  01C2  3017               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1401  01C3  00F5               	movwf	Lcd_Write_String@a
  1402  01C4  3080               	movlw	128
  1403  01C5  00F6               	movwf	Lcd_Write_String@a+1
  1404  01C6  120A  118A  230E  120A  118A  	fcall	_Lcd_Write_String
  1405  01CB                     l1781:
  1406  01CB  300D               	movlw	13
  1407  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1408  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1409  01CE  00B6               	movwf	??_mostrar
  1410  01CF  0836               	movf	??_mostrar,w
  1411  01D0  00F6               	movwf	Lcd_Set_Cursor@b
  1412  01D1  3001               	movlw	1
  1413  01D2  120A  118A  24A0  120A  118A  	fcall	_Lcd_Set_Cursor
  1414  01D7                     l1783:
  1415  01D7  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1416  01D8  00F5               	movwf	Lcd_Write_String@a
  1417  01D9  3080               	movlw	128
  1418  01DA  00F6               	movwf	Lcd_Write_String@a+1
  1419  01DB  120A  118A  230E  120A  118A  	fcall	_Lcd_Write_String
  1420  01E0                     l1785:
  1421  01E0  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1422  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1423  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1424  01E3  00B6               	movwf	??_mostrar
  1425  01E4  0836               	movf	??_mostrar,w
  1426  01E5  00A5               	movwf	sprintf@f
  1427  01E6  083D               	movf	_entero+1,w
  1428  01E7  00A7               	movwf	?_sprintf+2
  1429  01E8  083C               	movf	_entero,w
  1430  01E9  00A6               	movwf	?_sprintf+1
  1431  01EA  083B               	movf	_decima+1,w
  1432  01EB  00A9               	movwf	?_sprintf+4
  1433  01EC  083A               	movf	_decima,w
  1434  01ED  00A8               	movwf	?_sprintf+3
  1435  01EE  3042               	movlw	(low (_s| 0))& (0+255)
  1436  01EF  120A  118A  201D  120A  118A  	fcall	_sprintf
  1437  01F4                     l1787:
  1438  01F4  01F6               	clrf	Lcd_Set_Cursor@b
  1439  01F5  0AF6               	incf	Lcd_Set_Cursor@b,f
  1440  01F6  3002               	movlw	2
  1441  01F7  120A  118A  24A0  120A  118A  	fcall	_Lcd_Set_Cursor
  1442  01FC  3042               	movlw	(low (_s| 0))& (0+255)
  1443  01FD  00F5               	movwf	Lcd_Write_String@a
  1444  01FE  3000               	movlw	0
  1445  01FF  00F6               	movwf	Lcd_Write_String@a+1
  1446  0200  120A  118A  230E  120A  118A  	fcall	_Lcd_Write_String
  1447  0205  301F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1448  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1449  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1450  0208  00B6               	movwf	??_mostrar
  1451  0209  0836               	movf	??_mostrar,w
  1452  020A  00A5               	movwf	sprintf@f
  1453  020B  0841               	movf	_S2,w
  1454  020C  00B7               	movwf	??_mostrar+1
  1455  020D  01B8               	clrf	??_mostrar+2
  1456  020E  0837               	movf	??_mostrar+1,w
  1457  020F  00A6               	movwf	?_sprintf+1
  1458  0210  0838               	movf	??_mostrar+2,w
  1459  0211  00A7               	movwf	?_sprintf+2
  1460  0212  3042               	movlw	(low (_s| 0))& (0+255)
  1461  0213  120A  118A  201D  120A  118A  	fcall	_sprintf
  1462  0218                     l1789:
  1463  0218  3007               	movlw	7
  1464  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1465  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1466  021B  00B6               	movwf	??_mostrar
  1467  021C  0836               	movf	??_mostrar,w
  1468  021D  00F6               	movwf	Lcd_Set_Cursor@b
  1469  021E  3002               	movlw	2
  1470  021F  120A  118A  24A0  120A  118A  	fcall	_Lcd_Set_Cursor
  1471  0224                     l1791:
  1472  0224  3042               	movlw	(low (_s| 0))& (0+255)
  1473  0225  00F5               	movwf	Lcd_Write_String@a
  1474  0226  3000               	movlw	0
  1475  0227  00F6               	movwf	Lcd_Write_String@a+1
  1476  0228  120A  118A  230E  120A  118A  	fcall	_Lcd_Write_String
  1477  022D                     l1793:
  1478  022D  301F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1479  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1480  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1481  0230  00B6               	movwf	??_mostrar
  1482  0231  0836               	movf	??_mostrar,w
  1483  0232  00A5               	movwf	sprintf@f
  1484  0233  0840               	movf	_S3,w
  1485  0234  00B7               	movwf	??_mostrar+1
  1486  0235  01B8               	clrf	??_mostrar+2
  1487  0236  0837               	movf	??_mostrar+1,w
  1488  0237  00A6               	movwf	?_sprintf+1
  1489  0238  0838               	movf	??_mostrar+2,w
  1490  0239  00A7               	movwf	?_sprintf+2
  1491  023A  3042               	movlw	(low (_s| 0))& (0+255)
  1492  023B  120A  118A  201D  120A  118A  	fcall	_sprintf
  1493  0240                     l1795:
  1494  0240  300D               	movlw	13
  1495  0241  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0242  1303               	bcf	3,6	;RP1=0, select bank0
  1497  0243  00B6               	movwf	??_mostrar
  1498  0244  0836               	movf	??_mostrar,w
  1499  0245  00F6               	movwf	Lcd_Set_Cursor@b
  1500  0246  3002               	movlw	2
  1501  0247  120A  118A  24A0  120A  118A  	fcall	_Lcd_Set_Cursor
  1502  024C  3042               	movlw	(low (_s| 0))& (0+255)
  1503  024D  00F5               	movwf	Lcd_Write_String@a
  1504  024E  3000               	movlw	0
  1505  024F  00F6               	movwf	Lcd_Write_String@a+1
  1506  0250  120A  118A  230E  120A  118A  	fcall	_Lcd_Write_String
  1507  0255                     l71:
  1508  0255  0008               	return
  1509  0256                     __end_of_mostrar:
  1510                           
  1511                           	psect	text7
  1512  001D                     __ptext7:	
  1513 ;; *************** function _sprintf *****************
  1514 ;; Defined at:
  1515 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  sp              1    wreg     PTR unsigned char 
  1518 ;;		 -> s(16), 
  1519 ;;  f               1    5[BANK0 ] PTR const unsigned char 
  1520 ;;		 -> STR_6(4), STR_5(4), STR_4(8), 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  1523 ;;		 -> s(16), 
  1524 ;;  tmpval          4    0        struct .
  1525 ;;  width           2   18[BANK0 ] int 
  1526 ;;  val             2   16[BANK0 ] unsigned int 
  1527 ;;  cp              2    0        PTR const unsigned char 
  1528 ;;  len             2    0        unsigned int 
  1529 ;;  c               1   21[BANK0 ] unsigned char 
  1530 ;;  flag            1   15[BANK0 ] unsigned char 
  1531 ;;  prec            1   14[BANK0 ] char 
  1532 ;;  ap              1   13[BANK0 ] PTR void [1]
  1533 ;;		 -> ?_sprintf(2), 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  2    5[BANK0 ] int 
  1536 ;; Registers used:
  1537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1543 ;;      Params:         0       5       0       0       0
  1544 ;;      Locals:         0       9       0       0       0
  1545 ;;      Temps:          0       3       0       0       0
  1546 ;;      Totals:         0      17       0       0       0
  1547 ;;Total ram usage:       17 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    2
  1550 ;; This function calls:
  1551 ;;		___lwdiv
  1552 ;;		___lwmod
  1553 ;;		___wmul
  1554 ;;		_isdigit
  1555 ;; This function is called by:
  1556 ;;		_mostrar
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _sprintf
  1562  001D                     _sprintf:
  1563                           
  1564                           ;incstack = 0
  1565                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1566                           ;sprintf@sp stored from wreg
  1567  001D  1283               	bcf	3,5	;RP0=0, select bank0
  1568  001E  1303               	bcf	3,6	;RP1=0, select bank0
  1569  001F  00B4               	movwf	sprintf@sp
  1570  0020                     l1673:
  1571                           
  1572                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1573  0020  3026               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1574  0021  00AA               	movwf	??_sprintf
  1575  0022  082A               	movf	??_sprintf,w
  1576  0023  00AD               	movwf	sprintf@ap
  1577                           
  1578                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1579  0024  298E               	goto	l1755
  1580  0025                     l1675:
  1581                           
  1582                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1583  0025  3025               	movlw	37
  1584  0026  0635               	xorwf	sprintf@c,w
  1585  0027  1903               	btfsc	3,2
  1586  0028  282A               	goto	u1231
  1587  0029  282B               	goto	u1230
  1588  002A                     u1231:
  1589  002A  2837               	goto	l1681
  1590  002B                     u1230:
  1591  002B                     l1677:
  1592                           
  1593                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1594  002B  0835               	movf	sprintf@c,w
  1595  002C  00AA               	movwf	??_sprintf
  1596  002D  0834               	movf	sprintf@sp,w
  1597  002E  0084               	movwf	4
  1598  002F  082A               	movf	??_sprintf,w
  1599  0030  1383               	bcf	3,7	;select IRP bank0
  1600  0031  0080               	movwf	0
  1601  0032                     l1679:
  1602  0032  3001               	movlw	1
  1603  0033  00AA               	movwf	??_sprintf
  1604  0034  082A               	movf	??_sprintf,w
  1605  0035  07B4               	addwf	sprintf@sp,f
  1606                           
  1607                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1608  0036  298E               	goto	l1755
  1609  0037                     l1681:
  1610                           
  1611                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1612  0037  01B2               	clrf	sprintf@width
  1613  0038  01B3               	clrf	sprintf@width+1
  1614                           
  1615                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1616  0039  01AF               	clrf	sprintf@flag
  1617  003A                     l1683:
  1618                           
  1619                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1620  003A  0825               	movf	sprintf@f,w
  1621  003B  0084               	movwf	4
  1622  003C  120A  118A  2453  120A  118A  	fcall	stringdir
  1623  0041  120A  118A  2521  120A  118A  	fcall	_isdigit
  1624  0046  1C03               	btfss	3,0
  1625  0047  2849               	goto	u1241
  1626  0048  284A               	goto	u1240
  1627  0049                     u1241:
  1628  0049  288A               	goto	l1697
  1629  004A                     u1240:
  1630  004A                     l1685:
  1631                           
  1632                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1633  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1634  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1635  004C  01B2               	clrf	sprintf@width
  1636  004D  01B3               	clrf	sprintf@width+1
  1637  004E                     l1687:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1640  004E  300A               	movlw	10
  1641  004F  00F2               	movwf	___wmul@multiplier
  1642  0050  3000               	movlw	0
  1643  0051  00F3               	movwf	___wmul@multiplier+1
  1644  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1645  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1646  0054  0833               	movf	sprintf@width+1,w
  1647  0055  00F5               	movwf	___wmul@multiplicand+1
  1648  0056  0832               	movf	sprintf@width,w
  1649  0057  00F4               	movwf	___wmul@multiplicand
  1650  0058  120A  118A  247B  120A  118A  	fcall	___wmul
  1651  005D  0873               	movf	?___wmul+1,w
  1652  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1653  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1654  0060  00B3               	movwf	sprintf@width+1
  1655  0061  0872               	movf	?___wmul,w
  1656  0062  00B2               	movwf	sprintf@width
  1657  0063                     l1689:
  1658                           
  1659                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1660  0063  0825               	movf	sprintf@f,w
  1661  0064  0084               	movwf	4
  1662  0065  120A  118A  2453  120A  118A  	fcall	stringdir
  1663  006A  3ED0               	addlw	208
  1664  006B  00AA               	movwf	??_sprintf
  1665  006C  30FF               	movlw	255
  1666  006D  1803               	skipnc
  1667  006E  3000               	movlw	0
  1668  006F  00AB               	movwf	??_sprintf+1
  1669  0070  082A               	movf	??_sprintf,w
  1670  0071  07B2               	addwf	sprintf@width,f
  1671  0072  1803               	skipnc
  1672  0073  0AB3               	incf	sprintf@width+1,f
  1673  0074  082B               	movf	??_sprintf+1,w
  1674  0075  07B3               	addwf	sprintf@width+1,f
  1675  0076                     l1691:
  1676  0076  3001               	movlw	1
  1677  0077  00AA               	movwf	??_sprintf
  1678  0078  082A               	movf	??_sprintf,w
  1679  0079  07A5               	addwf	sprintf@f,f
  1680  007A                     l1693:
  1681                           
  1682                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1683  007A  0825               	movf	sprintf@f,w
  1684  007B  0084               	movwf	4
  1685  007C  120A  118A  2453  120A  118A  	fcall	stringdir
  1686  0081  120A  118A  2521  120A  118A  	fcall	_isdigit
  1687  0086  1803               	btfsc	3,0
  1688  0087  2889               	goto	u1251
  1689  0088  288A               	goto	u1250
  1690  0089                     u1251:
  1691  0089  284E               	goto	l1687
  1692  008A                     u1250:
  1693  008A                     l1697:
  1694  008A  3001               	movlw	1
  1695  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1696  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1697  008D  07A5               	addwf	sprintf@f,f
  1698  008E  30FF               	movlw	-1
  1699  008F  0725               	addwf	sprintf@f,w
  1700  0090  0084               	movwf	4
  1701  0091  120A  118A  2453  120A  118A  	fcall	stringdir
  1702  0096  00B5               	movwf	sprintf@c
  1703  0097  00AA               	movwf	??_sprintf
  1704  0098  01AB               	clrf	??_sprintf+1
  1705                           
  1706                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1707                           ; Switch size 1, requested type "simple"
  1708                           ; Number of cases is 1, Range of values is 0 to 0
  1709                           ; switch strategies available:
  1710                           ; Name         Instructions Cycles
  1711                           ; simple_byte            4     3 (average)
  1712                           ; direct_byte           11     8 (fixed)
  1713                           ; jumptable            260     6 (fixed)
  1714                           ;	Chosen strategy is simple_byte
  1715  0099  082B               	movf	??_sprintf+1,w
  1716  009A  3A00               	xorlw	0	; case 0
  1717  009B  1903               	skipnz
  1718  009C  289E               	goto	l1847
  1719  009D  298E               	goto	l1755
  1720  009E                     l1847:
  1721                           
  1722                           ; Switch size 1, requested type "simple"
  1723                           ; Number of cases is 3, Range of values is 0 to 105
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte           10     6 (average)
  1727                           ; jumptable            260     6 (fixed)
  1728                           ;	Chosen strategy is simple_byte
  1729  009E  082A               	movf	??_sprintf,w
  1730  009F  3A00               	xorlw	0	; case 0
  1731  00A0  1903               	skipnz
  1732  00A1  29A0               	goto	l1757
  1733  00A2  3A64               	xorlw	100	; case 100
  1734  00A3  1903               	skipnz
  1735  00A4  28A9               	goto	l1699
  1736  00A5  3A0D               	xorlw	13	; case 105
  1737  00A6  1903               	skipnz
  1738  00A7  28A9               	goto	l1699
  1739  00A8  298E               	goto	l1755
  1740  00A9                     l1699:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1743  00A9  082D               	movf	sprintf@ap,w
  1744  00AA  0084               	movwf	4
  1745  00AB  1383               	bcf	3,7	;select IRP bank0
  1746  00AC  0800               	movf	0,w
  1747  00AD  00B0               	movwf	sprintf@val
  1748  00AE  0A84               	incf	4,f
  1749  00AF  0800               	movf	0,w
  1750  00B0  00B1               	movwf	sprintf@val+1
  1751  00B1                     l1701:
  1752  00B1  3002               	movlw	2
  1753  00B2  00AA               	movwf	??_sprintf
  1754  00B3  082A               	movf	??_sprintf,w
  1755  00B4  07AD               	addwf	sprintf@ap,f
  1756  00B5                     l1703:
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1759  00B5  1FB1               	btfss	sprintf@val+1,7
  1760  00B6  28B8               	goto	u1261
  1761  00B7  28B9               	goto	u1260
  1762  00B8                     u1261:
  1763  00B8  28C2               	goto	l1709
  1764  00B9                     u1260:
  1765  00B9                     l1705:
  1766                           
  1767                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1768  00B9  3003               	movlw	3
  1769  00BA  00AA               	movwf	??_sprintf
  1770  00BB  082A               	movf	??_sprintf,w
  1771  00BC  04AF               	iorwf	sprintf@flag,f
  1772  00BD                     l1707:
  1773                           
  1774                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1775  00BD  09B0               	comf	sprintf@val,f
  1776  00BE  09B1               	comf	sprintf@val+1,f
  1777  00BF  0AB0               	incf	sprintf@val,f
  1778  00C0  1903               	skipnz
  1779  00C1  0AB1               	incf	sprintf@val+1,f
  1780  00C2                     l1709:
  1781                           
  1782                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1783  00C2  01B5               	clrf	sprintf@c
  1784  00C3  0AB5               	incf	sprintf@c,f
  1785  00C4                     l1715:
  1786                           
  1787                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1788  00C4  0835               	movf	sprintf@c,w
  1789  00C5  00AA               	movwf	??_sprintf
  1790  00C6  072A               	addwf	??_sprintf,w
  1791  00C7  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1792  00C8  0084               	movwf	4
  1793  00C9  120A  118A  2453  120A  118A  	fcall	stringdir
  1794  00CE  00AB               	movwf	??_sprintf+1
  1795  00CF  120A  118A  2453  120A  118A  	fcall	stringdir
  1796  00D4  00AC               	movwf	??_sprintf+2
  1797  00D5  082C               	movf	??_sprintf+2,w
  1798  00D6  0231               	subwf	sprintf@val+1,w
  1799  00D7  1D03               	skipz
  1800  00D8  28DB               	goto	u1275
  1801  00D9  082B               	movf	??_sprintf+1,w
  1802  00DA  0230               	subwf	sprintf@val,w
  1803  00DB                     u1275:
  1804  00DB  1803               	skipnc
  1805  00DC  28DE               	goto	u1271
  1806  00DD  28DF               	goto	u1270
  1807  00DE                     u1271:
  1808  00DE  28E0               	goto	l1719
  1809  00DF                     u1270:
  1810  00DF  28EA               	goto	l1721
  1811  00E0                     l1719:
  1812  00E0  3001               	movlw	1
  1813  00E1  00AA               	movwf	??_sprintf
  1814  00E2  082A               	movf	??_sprintf,w
  1815  00E3  07B5               	addwf	sprintf@c,f
  1816  00E4  3005               	movlw	5
  1817  00E5  0635               	xorwf	sprintf@c,w
  1818  00E6  1D03               	btfss	3,2
  1819  00E7  28E9               	goto	u1281
  1820  00E8  28EA               	goto	u1280
  1821  00E9                     u1281:
  1822  00E9  28C4               	goto	l1715
  1823  00EA                     u1280:
  1824  00EA                     l1721:
  1825                           
  1826                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1827  00EA  0832               	movf	sprintf@width,w
  1828  00EB  0433               	iorwf	sprintf@width+1,w
  1829  00EC  1903               	btfsc	3,2
  1830  00ED  28EF               	goto	u1291
  1831  00EE  28F0               	goto	u1290
  1832  00EF                     u1291:
  1833  00EF  28FC               	goto	l323
  1834  00F0                     u1290:
  1835  00F0                     l1723:
  1836  00F0  082F               	movf	sprintf@flag,w
  1837  00F1  3903               	andlw	3
  1838  00F2  1903               	btfsc	3,2
  1839  00F3  28F5               	goto	u1301
  1840  00F4  28F6               	goto	u1300
  1841  00F5                     u1301:
  1842  00F5  28FC               	goto	l323
  1843  00F6                     u1300:
  1844  00F6                     l1725:
  1845                           
  1846                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1847  00F6  30FF               	movlw	255
  1848  00F7  07B2               	addwf	sprintf@width,f
  1849  00F8  1803               	skipnc
  1850  00F9  0AB3               	incf	sprintf@width+1,f
  1851  00FA  30FF               	movlw	255
  1852  00FB  07B3               	addwf	sprintf@width+1,f
  1853  00FC                     l323:
  1854                           
  1855                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1856  00FC  0833               	movf	sprintf@width+1,w
  1857  00FD  3A80               	xorlw	128
  1858  00FE  3C80               	sublw	128
  1859  00FF  1D03               	skipz
  1860  0100  2903               	goto	u1315
  1861  0101  0832               	movf	sprintf@width,w
  1862  0102  0235               	subwf	sprintf@c,w
  1863  0103                     u1315:
  1864  0103  1803               	skipnc
  1865  0104  2906               	goto	u1311
  1866  0105  2907               	goto	u1310
  1867  0106                     u1311:
  1868  0106  2913               	goto	l1729
  1869  0107                     u1310:
  1870  0107                     l1727:
  1871                           
  1872                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1873  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0109  0835               	movf	sprintf@c,w
  1876  010A  00AA               	movwf	??_sprintf
  1877  010B  01AB               	clrf	??_sprintf+1
  1878  010C  082A               	movf	??_sprintf,w
  1879  010D  02B2               	subwf	sprintf@width,f
  1880  010E  082B               	movf	??_sprintf+1,w
  1881  010F  1C03               	skipc
  1882  0110  03B3               	decf	sprintf@width+1,f
  1883  0111  02B3               	subwf	sprintf@width+1,f
  1884  0112  2917               	goto	l1731
  1885  0113                     l1729:
  1886                           
  1887                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1888  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0115  01B2               	clrf	sprintf@width
  1891  0116  01B3               	clrf	sprintf@width+1
  1892  0117                     l1731:
  1893                           
  1894                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1895  0117  0832               	movf	sprintf@width,w
  1896  0118  0433               	iorwf	sprintf@width+1,w
  1897  0119  1903               	btfsc	3,2
  1898  011A  291C               	goto	u1321
  1899  011B  291D               	goto	u1320
  1900  011C                     u1321:
  1901  011C  2934               	goto	l1739
  1902  011D                     u1320:
  1903  011D                     l1733:
  1904                           
  1905                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1906  011D  3020               	movlw	32
  1907  011E  00AA               	movwf	??_sprintf
  1908  011F  0834               	movf	sprintf@sp,w
  1909  0120  0084               	movwf	4
  1910  0121  082A               	movf	??_sprintf,w
  1911  0122  1383               	bcf	3,7	;select IRP bank0
  1912  0123  0080               	movwf	0
  1913  0124                     l1735:
  1914  0124  3001               	movlw	1
  1915  0125  00AA               	movwf	??_sprintf
  1916  0126  082A               	movf	??_sprintf,w
  1917  0127  07B4               	addwf	sprintf@sp,f
  1918  0128                     l1737:
  1919  0128  30FF               	movlw	255
  1920  0129  07B2               	addwf	sprintf@width,f
  1921  012A  1803               	skipnc
  1922  012B  0AB3               	incf	sprintf@width+1,f
  1923  012C  30FF               	movlw	255
  1924  012D  07B3               	addwf	sprintf@width+1,f
  1925  012E  0832               	movf	sprintf@width,w
  1926  012F  0433               	iorwf	sprintf@width+1,w
  1927  0130  1D03               	btfss	3,2
  1928  0131  2933               	goto	u1331
  1929  0132  2934               	goto	u1330
  1930  0133                     u1331:
  1931  0133  291D               	goto	l1733
  1932  0134                     u1330:
  1933  0134                     l1739:
  1934                           
  1935                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1936  0134  082F               	movf	sprintf@flag,w
  1937  0135  3903               	andlw	3
  1938  0136  1903               	btfsc	3,2
  1939  0137  2939               	goto	u1341
  1940  0138  293A               	goto	u1340
  1941  0139                     u1341:
  1942  0139  2945               	goto	l1745
  1943  013A                     u1340:
  1944  013A                     l1741:
  1945                           
  1946                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1947  013A  302D               	movlw	45
  1948  013B  00AA               	movwf	??_sprintf
  1949  013C  0834               	movf	sprintf@sp,w
  1950  013D  0084               	movwf	4
  1951  013E  082A               	movf	??_sprintf,w
  1952  013F  1383               	bcf	3,7	;select IRP bank0
  1953  0140  0080               	movwf	0
  1954  0141                     l1743:
  1955  0141  3001               	movlw	1
  1956  0142  00AA               	movwf	??_sprintf
  1957  0143  082A               	movf	??_sprintf,w
  1958  0144  07B4               	addwf	sprintf@sp,f
  1959  0145                     l1745:
  1960                           
  1961                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1962  0145  0835               	movf	sprintf@c,w
  1963  0146  00AA               	movwf	??_sprintf
  1964  0147  082A               	movf	??_sprintf,w
  1965  0148  00AE               	movwf	sprintf@prec
  1966                           
  1967                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1968  0149  2985               	goto	l1753
  1969  014A                     l1747:
  1970                           
  1971                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1972  014A  300A               	movlw	10
  1973  014B  00A0               	movwf	___lwmod@divisor
  1974  014C  3000               	movlw	0
  1975  014D  00A1               	movwf	___lwmod@divisor+1
  1976  014E  082E               	movf	sprintf@prec,w
  1977  014F  00AA               	movwf	??_sprintf
  1978  0150  072A               	addwf	??_sprintf,w
  1979  0151  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1980  0152  0084               	movwf	4
  1981  0153  120A  118A  2453  120A  118A  	fcall	stringdir
  1982  0158  00F2               	movwf	___lwdiv@divisor
  1983  0159  120A  118A  2453  120A  118A  	fcall	stringdir
  1984  015E  00F3               	movwf	___lwdiv@divisor+1
  1985  015F  0831               	movf	sprintf@val+1,w
  1986  0160  00F5               	movwf	___lwdiv@dividend+1
  1987  0161  0830               	movf	sprintf@val,w
  1988  0162  00F4               	movwf	___lwdiv@dividend
  1989  0163  120A  118A  2354  120A  118A  	fcall	___lwdiv
  1990  0168  0873               	movf	?___lwdiv+1,w
  1991  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1992  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1993  016B  00A3               	movwf	___lwmod@dividend+1
  1994  016C  0872               	movf	?___lwdiv,w
  1995  016D  00A2               	movwf	___lwmod@dividend
  1996  016E  120A  118A  23D6  120A  118A  	fcall	___lwmod
  1997  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0175  0820               	movf	?___lwmod,w
  2000  0176  3E30               	addlw	48
  2001  0177  00AB               	movwf	??_sprintf+1
  2002  0178  082B               	movf	??_sprintf+1,w
  2003  0179  00B5               	movwf	sprintf@c
  2004  017A                     l1749:
  2005                           
  2006                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2007  017A  0835               	movf	sprintf@c,w
  2008  017B  00AA               	movwf	??_sprintf
  2009  017C  0834               	movf	sprintf@sp,w
  2010  017D  0084               	movwf	4
  2011  017E  082A               	movf	??_sprintf,w
  2012  017F  1383               	bcf	3,7	;select IRP bank0
  2013  0180  0080               	movwf	0
  2014  0181                     l1751:
  2015  0181  3001               	movlw	1
  2016  0182  00AA               	movwf	??_sprintf
  2017  0183  082A               	movf	??_sprintf,w
  2018  0184  07B4               	addwf	sprintf@sp,f
  2019  0185                     l1753:
  2020                           
  2021                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2022  0185  30FF               	movlw	255
  2023  0186  00AA               	movwf	??_sprintf
  2024  0187  082A               	movf	??_sprintf,w
  2025  0188  07AE               	addwf	sprintf@prec,f
  2026  0189  0A2E               	incf	sprintf@prec,w
  2027  018A  1D03               	btfss	3,2
  2028  018B  298D               	goto	u1351
  2029  018C  298E               	goto	u1350
  2030  018D                     u1351:
  2031  018D  294A               	goto	l1747
  2032  018E                     u1350:
  2033  018E                     l1755:
  2034                           
  2035                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2036  018E  3001               	movlw	1
  2037  018F  07A5               	addwf	sprintf@f,f
  2038  0190  30FF               	movlw	-1
  2039  0191  0725               	addwf	sprintf@f,w
  2040  0192  0084               	movwf	4
  2041  0193  120A  118A  2453  120A  118A  	fcall	stringdir
  2042  0198  00AA               	movwf	??_sprintf
  2043  0199  082A               	movf	??_sprintf,w
  2044  019A  00B5               	movwf	sprintf@c
  2045  019B  0835               	movf	sprintf@c,w
  2046  019C  1D03               	btfss	3,2
  2047  019D  299F               	goto	u1361
  2048  019E  29A0               	goto	u1360
  2049  019F                     u1361:
  2050  019F  2825               	goto	l1675
  2051  01A0                     u1360:
  2052  01A0                     l1757:
  2053                           
  2054                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2055  01A0  0834               	movf	sprintf@sp,w
  2056  01A1  0084               	movwf	4
  2057  01A2  1383               	bcf	3,7	;select IRP bank0
  2058  01A3  0180               	clrf	0
  2059  01A4                     l334:
  2060  01A4  0008               	return
  2061  01A5                     __end_of_sprintf:
  2062                           
  2063                           	psect	text8
  2064  0521                     __ptext8:	
  2065 ;; *************** function _isdigit *****************
  2066 ;; Defined at:
  2067 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  c               1    wreg     unsigned char 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  c               1    3[COMMON] unsigned char 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;		None               void
  2074 ;; Registers used:
  2075 ;;		wreg, status,2, status,0
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2081 ;;      Params:         0       0       0       0       0
  2082 ;;      Locals:         2       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0
  2084 ;;      Totals:         2       0       0       0       0
  2085 ;;Total ram usage:        2 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    1
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_sprintf
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           
  2096                           ;psect for function _isdigit
  2097  0521                     _isdigit:
  2098                           
  2099                           ;incstack = 0
  2100                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2101                           ;isdigit@c stored from wreg
  2102  0521  00F3               	movwf	isdigit@c
  2103  0522                     l1273:
  2104  0522  01F2               	clrf	_isdigit$921
  2105  0523                     l1275:
  2106  0523  303A               	movlw	58
  2107  0524  0273               	subwf	isdigit@c,w
  2108  0525  1803               	skipnc
  2109  0526  2D28               	goto	u611
  2110  0527  2D29               	goto	u610
  2111  0528                     u611:
  2112  0528  2D31               	goto	l1281
  2113  0529                     u610:
  2114  0529                     l1277:
  2115  0529  3030               	movlw	48
  2116  052A  0273               	subwf	isdigit@c,w
  2117  052B  1C03               	skipc
  2118  052C  2D2E               	goto	u621
  2119  052D  2D2F               	goto	u620
  2120  052E                     u621:
  2121  052E  2D31               	goto	l1281
  2122  052F                     u620:
  2123  052F                     l1279:
  2124  052F  01F2               	clrf	_isdigit$921
  2125  0530  0AF2               	incf	_isdigit$921,f
  2126  0531                     l1281:
  2127  0531  0C72               	rrf	_isdigit$921,w
  2128  0532                     l791:
  2129  0532  0008               	return
  2130  0533                     __end_of_isdigit:
  2131                           
  2132                           	psect	text9
  2133  047B                     __ptext9:	
  2134 ;; *************** function ___wmul *****************
  2135 ;; Defined at:
  2136 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  multiplier      2    2[COMMON] unsigned int 
  2139 ;;  multiplicand    2    4[COMMON] unsigned int 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  product         2    6[COMMON] unsigned int 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  2    2[COMMON] unsigned int 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151 ;;      Params:         4       0       0       0       0
  2152 ;;      Locals:         2       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0
  2154 ;;      Totals:         6       0       0       0       0
  2155 ;;Total ram usage:        6 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_sprintf
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           
  2166                           ;psect for function ___wmul
  2167  047B                     ___wmul:
  2168  047B                     l1285:	
  2169                           ;incstack = 0
  2170                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2171                           
  2172  047B  01F6               	clrf	___wmul@product
  2173  047C  01F7               	clrf	___wmul@product+1
  2174  047D                     l1287:
  2175  047D  1C72               	btfss	___wmul@multiplier,0
  2176  047E  2C80               	goto	u631
  2177  047F  2C81               	goto	u630
  2178  0480                     u631:
  2179  0480  2C87               	goto	l338
  2180  0481                     u630:
  2181  0481                     l1289:
  2182  0481  0874               	movf	___wmul@multiplicand,w
  2183  0482  07F6               	addwf	___wmul@product,f
  2184  0483  1803               	skipnc
  2185  0484  0AF7               	incf	___wmul@product+1,f
  2186  0485  0875               	movf	___wmul@multiplicand+1,w
  2187  0486  07F7               	addwf	___wmul@product+1,f
  2188  0487                     l338:
  2189  0487  3001               	movlw	1
  2190  0488                     u645:
  2191  0488  1003               	clrc
  2192  0489  0DF4               	rlf	___wmul@multiplicand,f
  2193  048A  0DF5               	rlf	___wmul@multiplicand+1,f
  2194  048B  3EFF               	addlw	-1
  2195  048C  1D03               	skipz
  2196  048D  2C88               	goto	u645
  2197  048E                     l1291:
  2198  048E  3001               	movlw	1
  2199  048F                     u655:
  2200  048F  1003               	clrc
  2201  0490  0CF3               	rrf	___wmul@multiplier+1,f
  2202  0491  0CF2               	rrf	___wmul@multiplier,f
  2203  0492  3EFF               	addlw	-1
  2204  0493  1D03               	skipz
  2205  0494  2C8F               	goto	u655
  2206  0495                     l1293:
  2207  0495  0872               	movf	___wmul@multiplier,w
  2208  0496  0473               	iorwf	___wmul@multiplier+1,w
  2209  0497  1D03               	btfss	3,2
  2210  0498  2C9A               	goto	u661
  2211  0499  2C9B               	goto	u660
  2212  049A                     u661:
  2213  049A  2C7D               	goto	l1287
  2214  049B                     u660:
  2215  049B                     l1295:
  2216  049B  0877               	movf	___wmul@product+1,w
  2217  049C  00F3               	movwf	?___wmul+1
  2218  049D  0876               	movf	___wmul@product,w
  2219  049E  00F2               	movwf	?___wmul
  2220  049F                     l340:
  2221  049F  0008               	return
  2222  04A0                     __end_of___wmul:
  2223                           
  2224                           	psect	text10
  2225  03D6                     __ptext10:	
  2226 ;; *************** function ___lwmod *****************
  2227 ;; Defined at:
  2228 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;  divisor         2    0[BANK0 ] unsigned int 
  2231 ;;  dividend        2    2[BANK0 ] unsigned int 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  counter         1    4[BANK0 ] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  2    0[BANK0 ] unsigned int 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         0       4       0       0       0
  2244 ;;      Locals:         0       1       0       0       0
  2245 ;;      Temps:          1       0       0       0       0
  2246 ;;      Totals:         1       5       0       0       0
  2247 ;;Total ram usage:        6 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_sprintf
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           
  2258                           ;psect for function ___lwmod
  2259  03D6                     ___lwmod:
  2260  03D6                     l1631:	
  2261                           ;incstack = 0
  2262                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2263                           
  2264  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2265  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2266  03D8  0820               	movf	___lwmod@divisor,w
  2267  03D9  0421               	iorwf	___lwmod@divisor+1,w
  2268  03DA  1903               	btfsc	3,2
  2269  03DB  2BDD               	goto	u1121
  2270  03DC  2BDE               	goto	u1120
  2271  03DD                     u1121:
  2272  03DD  2C0D               	goto	l1649
  2273  03DE                     u1120:
  2274  03DE                     l1633:
  2275  03DE  01A4               	clrf	___lwmod@counter
  2276  03DF  0AA4               	incf	___lwmod@counter,f
  2277  03E0  2BEC               	goto	l1639
  2278  03E1                     l1635:
  2279  03E1  3001               	movlw	1
  2280  03E2                     u1135:
  2281  03E2  1003               	clrc
  2282  03E3  0DA0               	rlf	___lwmod@divisor,f
  2283  03E4  0DA1               	rlf	___lwmod@divisor+1,f
  2284  03E5  3EFF               	addlw	-1
  2285  03E6  1D03               	skipz
  2286  03E7  2BE2               	goto	u1135
  2287  03E8                     l1637:
  2288  03E8  3001               	movlw	1
  2289  03E9  00FA               	movwf	??___lwmod
  2290  03EA  087A               	movf	??___lwmod,w
  2291  03EB  07A4               	addwf	___lwmod@counter,f
  2292  03EC                     l1639:
  2293  03EC  1FA1               	btfss	___lwmod@divisor+1,7
  2294  03ED  2BEF               	goto	u1141
  2295  03EE  2BF0               	goto	u1140
  2296  03EF                     u1141:
  2297  03EF  2BE1               	goto	l1635
  2298  03F0                     u1140:
  2299  03F0                     l1641:
  2300  03F0  0821               	movf	___lwmod@divisor+1,w
  2301  03F1  0223               	subwf	___lwmod@dividend+1,w
  2302  03F2  1D03               	skipz
  2303  03F3  2BF6               	goto	u1155
  2304  03F4  0820               	movf	___lwmod@divisor,w
  2305  03F5  0222               	subwf	___lwmod@dividend,w
  2306  03F6                     u1155:
  2307  03F6  1C03               	skipc
  2308  03F7  2BF9               	goto	u1151
  2309  03F8  2BFA               	goto	u1150
  2310  03F9                     u1151:
  2311  03F9  2C00               	goto	l1645
  2312  03FA                     u1150:
  2313  03FA                     l1643:
  2314  03FA  0820               	movf	___lwmod@divisor,w
  2315  03FB  02A2               	subwf	___lwmod@dividend,f
  2316  03FC  0821               	movf	___lwmod@divisor+1,w
  2317  03FD  1C03               	skipc
  2318  03FE  03A3               	decf	___lwmod@dividend+1,f
  2319  03FF  02A3               	subwf	___lwmod@dividend+1,f
  2320  0400                     l1645:
  2321  0400  3001               	movlw	1
  2322  0401                     u1165:
  2323  0401  1003               	clrc
  2324  0402  0CA1               	rrf	___lwmod@divisor+1,f
  2325  0403  0CA0               	rrf	___lwmod@divisor,f
  2326  0404  3EFF               	addlw	-1
  2327  0405  1D03               	skipz
  2328  0406  2C01               	goto	u1165
  2329  0407                     l1647:
  2330  0407  3001               	movlw	1
  2331  0408  02A4               	subwf	___lwmod@counter,f
  2332  0409  1D03               	btfss	3,2
  2333  040A  2C0C               	goto	u1171
  2334  040B  2C0D               	goto	u1170
  2335  040C                     u1171:
  2336  040C  2BF0               	goto	l1641
  2337  040D                     u1170:
  2338  040D                     l1649:
  2339  040D  0823               	movf	___lwmod@dividend+1,w
  2340  040E  00A1               	movwf	?___lwmod+1
  2341  040F  0822               	movf	___lwmod@dividend,w
  2342  0410  00A0               	movwf	?___lwmod
  2343  0411                     l620:
  2344  0411  0008               	return
  2345  0412                     __end_of___lwmod:
  2346                           
  2347                           	psect	text11
  2348  0354                     __ptext11:	
  2349 ;; *************** function ___lwdiv *****************
  2350 ;; Defined at:
  2351 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  divisor         2    2[COMMON] unsigned int 
  2354 ;;  dividend        2    4[COMMON] unsigned int 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  quotient        2    7[COMMON] unsigned int 
  2357 ;;  counter         1    9[COMMON] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  2    2[COMMON] unsigned int 
  2360 ;; Registers used:
  2361 ;;		wreg, status,2, status,0
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2367 ;;      Params:         4       0       0       0       0
  2368 ;;      Locals:         3       0       0       0       0
  2369 ;;      Temps:          1       0       0       0       0
  2370 ;;      Totals:         8       0       0       0       0
  2371 ;;Total ram usage:        8 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    1
  2374 ;; This function calls:
  2375 ;;		Nothing
  2376 ;; This function is called by:
  2377 ;;		_sprintf
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           
  2382                           ;psect for function ___lwdiv
  2383  0354                     ___lwdiv:
  2384  0354                     l1299:	
  2385                           ;incstack = 0
  2386                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2387                           
  2388  0354  01F7               	clrf	___lwdiv@quotient
  2389  0355  01F8               	clrf	___lwdiv@quotient+1
  2390  0356                     l1301:
  2391  0356  0872               	movf	___lwdiv@divisor,w
  2392  0357  0473               	iorwf	___lwdiv@divisor+1,w
  2393  0358  1903               	btfsc	3,2
  2394  0359  2B5B               	goto	u671
  2395  035A  2B5C               	goto	u670
  2396  035B                     u671:
  2397  035B  2B93               	goto	l1321
  2398  035C                     u670:
  2399  035C                     l1303:
  2400  035C  01F9               	clrf	___lwdiv@counter
  2401  035D  0AF9               	incf	___lwdiv@counter,f
  2402  035E  2B6A               	goto	l1309
  2403  035F                     l1305:
  2404  035F  3001               	movlw	1
  2405  0360                     u685:
  2406  0360  1003               	clrc
  2407  0361  0DF2               	rlf	___lwdiv@divisor,f
  2408  0362  0DF3               	rlf	___lwdiv@divisor+1,f
  2409  0363  3EFF               	addlw	-1
  2410  0364  1D03               	skipz
  2411  0365  2B60               	goto	u685
  2412  0366                     l1307:
  2413  0366  3001               	movlw	1
  2414  0367  00F6               	movwf	??___lwdiv
  2415  0368  0876               	movf	??___lwdiv,w
  2416  0369  07F9               	addwf	___lwdiv@counter,f
  2417  036A                     l1309:
  2418  036A  1FF3               	btfss	___lwdiv@divisor+1,7
  2419  036B  2B6D               	goto	u691
  2420  036C  2B6E               	goto	u690
  2421  036D                     u691:
  2422  036D  2B5F               	goto	l1305
  2423  036E                     u690:
  2424  036E                     l1311:
  2425  036E  3001               	movlw	1
  2426  036F                     u705:
  2427  036F  1003               	clrc
  2428  0370  0DF7               	rlf	___lwdiv@quotient,f
  2429  0371  0DF8               	rlf	___lwdiv@quotient+1,f
  2430  0372  3EFF               	addlw	-1
  2431  0373  1D03               	skipz
  2432  0374  2B6F               	goto	u705
  2433  0375  0873               	movf	___lwdiv@divisor+1,w
  2434  0376  0275               	subwf	___lwdiv@dividend+1,w
  2435  0377  1D03               	skipz
  2436  0378  2B7B               	goto	u715
  2437  0379  0872               	movf	___lwdiv@divisor,w
  2438  037A  0274               	subwf	___lwdiv@dividend,w
  2439  037B                     u715:
  2440  037B  1C03               	skipc
  2441  037C  2B7E               	goto	u711
  2442  037D  2B7F               	goto	u710
  2443  037E                     u711:
  2444  037E  2B86               	goto	l1317
  2445  037F                     u710:
  2446  037F                     l1313:
  2447  037F  0872               	movf	___lwdiv@divisor,w
  2448  0380  02F4               	subwf	___lwdiv@dividend,f
  2449  0381  0873               	movf	___lwdiv@divisor+1,w
  2450  0382  1C03               	skipc
  2451  0383  03F5               	decf	___lwdiv@dividend+1,f
  2452  0384  02F5               	subwf	___lwdiv@dividend+1,f
  2453  0385                     l1315:
  2454  0385  1477               	bsf	___lwdiv@quotient,0
  2455  0386                     l1317:
  2456  0386  3001               	movlw	1
  2457  0387                     u725:
  2458  0387  1003               	clrc
  2459  0388  0CF3               	rrf	___lwdiv@divisor+1,f
  2460  0389  0CF2               	rrf	___lwdiv@divisor,f
  2461  038A  3EFF               	addlw	-1
  2462  038B  1D03               	skipz
  2463  038C  2B87               	goto	u725
  2464  038D                     l1319:
  2465  038D  3001               	movlw	1
  2466  038E  02F9               	subwf	___lwdiv@counter,f
  2467  038F  1D03               	btfss	3,2
  2468  0390  2B92               	goto	u731
  2469  0391  2B93               	goto	u730
  2470  0392                     u731:
  2471  0392  2B6E               	goto	l1311
  2472  0393                     u730:
  2473  0393                     l1321:
  2474  0393  0878               	movf	___lwdiv@quotient+1,w
  2475  0394  00F3               	movwf	?___lwdiv+1
  2476  0395  0877               	movf	___lwdiv@quotient,w
  2477  0396  00F2               	movwf	?___lwdiv
  2478  0397                     l610:
  2479  0397  0008               	return
  2480  0398                     __end_of___lwdiv:
  2481                           
  2482                           	psect	text12
  2483  030E                     __ptext12:	
  2484 ;; *************** function _Lcd_Write_String *****************
  2485 ;; Defined at:
  2486 ;;		line 109 in file "lcd_library.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  a               2    5[COMMON] PTR unsigned char 
  2489 ;;		 -> s(16), STR_3(4), STR_2(4), STR_1(4), 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  i               2    0[BANK0 ] int 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2501 ;;      Params:         2       0       0       0       0
  2502 ;;      Locals:         0       2       0       0       0
  2503 ;;      Temps:          3       0       0       0       0
  2504 ;;      Totals:         5       2       0       0       0
  2505 ;;Total ram usage:        7 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    3
  2508 ;; This function calls:
  2509 ;;		_Lcd_Write_Char
  2510 ;; This function is called by:
  2511 ;;		_mostrar
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           
  2516                           ;psect for function _Lcd_Write_String
  2517  030E                     _Lcd_Write_String:
  2518  030E                     l1665:	
  2519                           ;incstack = 0
  2520                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2521                           
  2522                           
  2523                           ;lcd_library.c: 109: void Lcd_Write_String(char *a);lcd_library.c: 110: {;lcd_library.c:
      +                           111:  int i;;lcd_library.c: 112:  for(i=0;a[i]!='\0';i++)
  2524  030E  1283               	bcf	3,5	;RP0=0, select bank0
  2525  030F  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0310  01A0               	clrf	Lcd_Write_String@i
  2527  0311  01A1               	clrf	Lcd_Write_String@i+1
  2528  0312  2B37               	goto	l1671
  2529  0313                     l1667:
  2530                           
  2531                           ;lcd_library.c: 113:     Lcd_Write_Char(a[i]);
  2532  0313  0820               	movf	Lcd_Write_String@i,w
  2533  0314  0775               	addwf	Lcd_Write_String@a,w
  2534  0315  00F8               	movwf	??_Lcd_Write_String+1
  2535  0316  0876               	movf	Lcd_Write_String@a+1,w
  2536  0317  00F7               	movwf	??_Lcd_Write_String
  2537  0318  1803               	skipnc
  2538  0319  0AF7               	incf	??_Lcd_Write_String,f
  2539  031A  1FA0               	btfss	Lcd_Write_String@i,7
  2540  031B  2B1D               	goto	u1200
  2541  031C  03F7               	decf	??_Lcd_Write_String,f
  2542  031D                     u1200:
  2543  031D  0877               	movf	??_Lcd_Write_String,w
  2544  031E  00F9               	movwf	??_Lcd_Write_String+2
  2545  031F  0879               	movf	??_Lcd_Write_String+2,w
  2546  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0321  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0322  00FF               	movwf	btemp+1
  2549  0323  0878               	movf	??_Lcd_Write_String+1,w
  2550  0324  0084               	movwf	4
  2551  0325  120A  118A  2449  120A  118A  	fcall	stringtab
  2552  032A  120A  118A  250B  120A  118A  	fcall	_Lcd_Write_Char
  2553  032F                     l1669:
  2554  032F  3001               	movlw	1
  2555  0330  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0331  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0332  07A0               	addwf	Lcd_Write_String@i,f
  2558  0333  1803               	skipnc
  2559  0334  0AA1               	incf	Lcd_Write_String@i+1,f
  2560  0335  3000               	movlw	0
  2561  0336  07A1               	addwf	Lcd_Write_String@i+1,f
  2562  0337                     l1671:
  2563  0337  0820               	movf	Lcd_Write_String@i,w
  2564  0338  0775               	addwf	Lcd_Write_String@a,w
  2565  0339  00F8               	movwf	??_Lcd_Write_String+1
  2566  033A  0876               	movf	Lcd_Write_String@a+1,w
  2567  033B  00F7               	movwf	??_Lcd_Write_String
  2568  033C  1803               	skipnc
  2569  033D  0AF7               	incf	??_Lcd_Write_String,f
  2570  033E  1FA0               	btfss	Lcd_Write_String@i,7
  2571  033F  2B41               	goto	u1210
  2572  0340  03F7               	decf	??_Lcd_Write_String,f
  2573  0341                     u1210:
  2574  0341  0877               	movf	??_Lcd_Write_String,w
  2575  0342  00F9               	movwf	??_Lcd_Write_String+2
  2576  0343  0879               	movf	??_Lcd_Write_String+2,w
  2577  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2578  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2579  0346  00FF               	movwf	btemp+1
  2580  0347  0878               	movf	??_Lcd_Write_String+1,w
  2581  0348  0084               	movwf	4
  2582  0349  120A  118A  2449  120A  118A  	fcall	stringtab
  2583  034E  3A00               	xorlw	0
  2584  034F  1D03               	skipz
  2585  0350  2B52               	goto	u1221
  2586  0351  2B53               	goto	u1220
  2587  0352                     u1221:
  2588  0352  2B13               	goto	l1667
  2589  0353                     u1220:
  2590  0353                     l147:
  2591  0353  0008               	return
  2592  0354                     __end_of_Lcd_Write_String:
  2593                           
  2594                           	psect	text13
  2595  050B                     __ptext13:	
  2596 ;; *************** function _Lcd_Write_Char *****************
  2597 ;; Defined at:
  2598 ;;		line 100 in file "lcd_library.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  a               1    wreg     unsigned char 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  a               1    4[COMMON] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0, pclath, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2612 ;;      Params:         0       0       0       0       0
  2613 ;;      Locals:         1       0       0       0       0
  2614 ;;      Temps:          1       0       0       0       0
  2615 ;;      Totals:         2       0       0       0       0
  2616 ;;Total ram usage:        2 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    2
  2619 ;; This function calls:
  2620 ;;		_Lcd_Port
  2621 ;; This function is called by:
  2622 ;;		_Lcd_Write_String
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _Lcd_Write_Char
  2628  050B                     _Lcd_Write_Char:
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2632                           ;Lcd_Write_Char@a stored from wreg
  2633  050B  00F4               	movwf	Lcd_Write_Char@a
  2634  050C                     l1621:
  2635                           
  2636                           ;lcd_library.c: 100: void Lcd_Write_Char(char a);lcd_library.c: 101: {;lcd_library.c: 10
      +                          2:    RE0 = 1;
  2637  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2638  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2639  050E  1409               	bsf	9,0	;volatile
  2640  050F                     l1623:
  2641                           
  2642                           ;lcd_library.c: 103:    Lcd_Port(a);
  2643  050F  0874               	movf	Lcd_Write_Char@a,w
  2644  0510  120A  118A  2398  120A  118A  	fcall	_Lcd_Port
  2645  0515                     l1625:
  2646                           
  2647                           ;lcd_library.c: 104:    RE1 = 1;
  2648  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2649  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2650  0517  1489               	bsf	9,1	;volatile
  2651  0518                     l1627:
  2652                           
  2653                           ;lcd_library.c: 105:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2654  0518  301A               	movlw	26
  2655  0519  00F3               	movwf	??_Lcd_Write_Char
  2656  051A                     u1377:
  2657  051A  0BF3               	decfsz	??_Lcd_Write_Char,f
  2658  051B  2D1A               	goto	u1377
  2659  051C  0000               	nop
  2660  051D                     l1629:
  2661                           
  2662                           ;lcd_library.c: 106:    RE1 = 0;
  2663  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2664  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2665  051F  1089               	bcf	9,1	;volatile
  2666  0520                     l141:
  2667  0520  0008               	return
  2668  0521                     __end_of_Lcd_Write_Char:
  2669                           
  2670                           	psect	text14
  2671  04A0                     __ptext14:	
  2672 ;; *************** function _Lcd_Set_Cursor *****************
  2673 ;; Defined at:
  2674 ;;		line 69 in file "lcd_library.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  a               1    wreg     unsigned char 
  2677 ;;  b               1    6[COMMON] unsigned char 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  a               1    8[COMMON] unsigned char 
  2680 ;;  temp            1    9[COMMON] unsigned char 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      void 
  2683 ;; Registers used:
  2684 ;;		wreg, status,2, status,0, pclath, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2690 ;;      Params:         1       0       0       0       0
  2691 ;;      Locals:         2       0       0       0       0
  2692 ;;      Temps:          1       0       0       0       0
  2693 ;;      Totals:         4       0       0       0       0
  2694 ;;Total ram usage:        4 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    3
  2697 ;; This function calls:
  2698 ;;		_Lcd_Cmd
  2699 ;; This function is called by:
  2700 ;;		_mostrar
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _Lcd_Set_Cursor
  2706  04A0                     _Lcd_Set_Cursor:
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2710                           ;Lcd_Set_Cursor@a stored from wreg
  2711  04A0  00F8               	movwf	Lcd_Set_Cursor@a
  2712  04A1                     l1653:
  2713                           
  2714                           ;lcd_library.c: 69: void Lcd_Set_Cursor(char a, char b);lcd_library.c: 70: {;lcd_library
      +                          .c: 71:  char temp;;lcd_library.c: 72:  if(a == 1)
  2715  04A1  0378               	decf	Lcd_Set_Cursor@a,w
  2716  04A2  1D03               	btfss	3,2
  2717  04A3  2CA5               	goto	u1181
  2718  04A4  2CA6               	goto	u1180
  2719  04A5                     u1181:
  2720  04A5  2CB2               	goto	l1659
  2721  04A6                     u1180:
  2722  04A6                     l1655:
  2723                           
  2724                           ;lcd_library.c: 73:  {;lcd_library.c: 74:         temp = 0x80 + b - 1;
  2725  04A6  0876               	movf	Lcd_Set_Cursor@b,w
  2726  04A7  3E7F               	addlw	127
  2727  04A8  00F7               	movwf	??_Lcd_Set_Cursor
  2728  04A9  0877               	movf	??_Lcd_Set_Cursor,w
  2729  04AA  00F9               	movwf	Lcd_Set_Cursor@temp
  2730  04AB                     l1657:
  2731                           
  2732                           ;lcd_library.c: 75:         Lcd_Cmd(temp);
  2733  04AB  0879               	movf	Lcd_Set_Cursor@temp,w
  2734  04AC  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2735                           
  2736                           ;lcd_library.c: 76:  }
  2737  04B1  2CC3               	goto	l135
  2738  04B2                     l1659:
  2739  04B2  3002               	movlw	2
  2740  04B3  0678               	xorwf	Lcd_Set_Cursor@a,w
  2741  04B4  1D03               	btfss	3,2
  2742  04B5  2CB7               	goto	u1191
  2743  04B6  2CB8               	goto	u1190
  2744  04B7                     u1191:
  2745  04B7  2CC3               	goto	l135
  2746  04B8                     u1190:
  2747  04B8                     l1661:
  2748                           
  2749                           ;lcd_library.c: 78:  {;lcd_library.c: 79:         temp = 0xC0 + b - 1;
  2750  04B8  0876               	movf	Lcd_Set_Cursor@b,w
  2751  04B9  3EBF               	addlw	191
  2752  04BA  00F7               	movwf	??_Lcd_Set_Cursor
  2753  04BB  0877               	movf	??_Lcd_Set_Cursor,w
  2754  04BC  00F9               	movwf	Lcd_Set_Cursor@temp
  2755  04BD                     l1663:
  2756                           
  2757                           ;lcd_library.c: 80:         Lcd_Cmd(temp);
  2758  04BD  0879               	movf	Lcd_Set_Cursor@temp,w
  2759  04BE  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2760  04C3                     l135:
  2761  04C3  0008               	return
  2762  04C4                     __end_of_Lcd_Set_Cursor:
  2763                           
  2764                           	psect	text15
  2765  0412                     __ptext15:	
  2766 ;; *************** function _adc_to_5V *****************
  2767 ;; Defined at:
  2768 ;;		line 162 in file "mcu1_master.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2782 ;;      Params:         0       0       0       0       0
  2783 ;;      Locals:         0       0       0       0       0
  2784 ;;      Temps:          1       0       0       0       0
  2785 ;;      Totals:         1       0       0       0       0
  2786 ;;Total ram usage:        1 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; Hardware stack levels required when called:    1
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _adc_to_5V
  2798  0412                     _adc_to_5V:
  2799  0412                     l1503:	
  2800                           ;incstack = 0
  2801                           ; Regs used in _adc_to_5V: [wreg+status,2+status,0]
  2802                           
  2803  0412  30FB               	movlw	251
  2804  0413  027B               	subwf	_S1,w
  2805  0414  1C03               	skipc
  2806  0415  2C17               	goto	u1011
  2807  0416  2C18               	goto	u1010
  2808  0417                     u1011:
  2809  0417  2C2E               	goto	l1513
  2810  0418                     u1010:
  2811  0418                     l1505:
  2812  0418  3005               	movlw	5
  2813  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2814  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2815  041B  00BC               	movwf	_entero
  2816  041C  3000               	movlw	0
  2817  041D  00BD               	movwf	_entero+1
  2818  041E                     l1507:
  2819  041E  01BA               	clrf	_decima
  2820  041F  01BB               	clrf	_decima+1
  2821  0420  2C48               	goto	l82
  2822  0421                     l1509:
  2823  0421  087B               	movf	_S1,w
  2824  0422  3ECE               	addlw	206
  2825  0423  00F2               	movwf	??_adc_to_5V
  2826  0424  0872               	movf	??_adc_to_5V,w
  2827  0425  00FB               	movwf	_S1
  2828  0426                     l1511:
  2829  0426  3001               	movlw	1
  2830  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0429  07BC               	addwf	_entero,f
  2833  042A  1803               	skipnc
  2834  042B  0ABD               	incf	_entero+1,f
  2835  042C  3000               	movlw	0
  2836  042D  07BD               	addwf	_entero+1,f
  2837  042E                     l1513:
  2838  042E  3032               	movlw	50
  2839  042F  027B               	subwf	_S1,w
  2840  0430  1803               	skipnc
  2841  0431  2C33               	goto	u1021
  2842  0432  2C34               	goto	u1020
  2843  0433                     u1021:
  2844  0433  2C21               	goto	l1509
  2845  0434                     u1020:
  2846  0434  2C42               	goto	l1519
  2847  0435                     l1515:
  2848  0435  087B               	movf	_S1,w
  2849  0436  3EFB               	addlw	251
  2850  0437  00F2               	movwf	??_adc_to_5V
  2851  0438  0872               	movf	??_adc_to_5V,w
  2852  0439  00FB               	movwf	_S1
  2853  043A                     l1517:
  2854  043A  3001               	movlw	1
  2855  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2856  043C  1303               	bcf	3,6	;RP1=0, select bank0
  2857  043D  07BA               	addwf	_decima,f
  2858  043E  1803               	skipnc
  2859  043F  0ABB               	incf	_decima+1,f
  2860  0440  3000               	movlw	0
  2861  0441  07BB               	addwf	_decima+1,f
  2862  0442                     l1519:
  2863  0442  3005               	movlw	5
  2864  0443  027B               	subwf	_S1,w
  2865  0444  1803               	skipnc
  2866  0445  2C47               	goto	u1031
  2867  0446  2C48               	goto	u1030
  2868  0447                     u1031:
  2869  0447  2C35               	goto	l1515
  2870  0448                     u1030:
  2871  0448                     l82:
  2872  0448  0008               	return
  2873  0449                     __end_of_adc_to_5V:
  2874                           
  2875                           	psect	text16
  2876  02C3                     __ptext16:	
  2877 ;; *************** function _Lcd_Init *****************
  2878 ;; Defined at:
  2879 ;;		line 84 in file "lcd_library.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0, pclath, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2893 ;;      Params:         0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0
  2895 ;;      Temps:          2       0       0       0       0
  2896 ;;      Totals:         2       0       0       0       0
  2897 ;;Total ram usage:        2 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    3
  2900 ;; This function calls:
  2901 ;;		_Lcd_Cmd
  2902 ;;		_Lcd_Port
  2903 ;; This function is called by:
  2904 ;;		_main
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _Lcd_Init
  2910  02C3                     _Lcd_Init:
  2911  02C3                     l1765:	
  2912                           ;incstack = 0
  2913                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2914                           
  2915                           
  2916                           ;lcd_library.c: 86:   Lcd_Port(0x00);
  2917  02C3  3000               	movlw	0
  2918  02C4  120A  118A  2398  120A  118A  	fcall	_Lcd_Port
  2919  02C9                     l1767:
  2920                           
  2921                           ;lcd_library.c: 87:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2922  02C9  3034               	movlw	52
  2923  02CA  00F7               	movwf	??_Lcd_Init+1
  2924  02CB  30F1               	movlw	241
  2925  02CC  00F6               	movwf	??_Lcd_Init
  2926  02CD                     u1387:
  2927  02CD  0BF6               	decfsz	??_Lcd_Init,f
  2928  02CE  2ACD               	goto	u1387
  2929  02CF  0BF7               	decfsz	??_Lcd_Init+1,f
  2930  02D0  2ACD               	goto	u1387
  2931  02D1  2AD2               	nop2
  2932  02D2                     l1769:
  2933                           
  2934                           ;lcd_library.c: 88:   Lcd_Cmd(0x03);
  2935  02D2  3003               	movlw	3
  2936  02D3  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2937                           
  2938                           ;lcd_library.c: 89:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2939  02D8  300D               	movlw	13
  2940  02D9  00F7               	movwf	??_Lcd_Init+1
  2941  02DA  30FB               	movlw	251
  2942  02DB  00F6               	movwf	??_Lcd_Init
  2943  02DC                     u1397:
  2944  02DC  0BF6               	decfsz	??_Lcd_Init,f
  2945  02DD  2ADC               	goto	u1397
  2946  02DE  0BF7               	decfsz	??_Lcd_Init+1,f
  2947  02DF  2ADC               	goto	u1397
  2948  02E0  2AE1               	nop2
  2949  02E1                     l1771:
  2950                           
  2951                           ;lcd_library.c: 90:   Lcd_Cmd(0x03);
  2952  02E1  3003               	movlw	3
  2953  02E2  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2954  02E7                     l1773:
  2955                           
  2956                           ;lcd_library.c: 91:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2957  02E7  301D               	movlw	29
  2958  02E8  00F7               	movwf	??_Lcd_Init+1
  2959  02E9  3091               	movlw	145
  2960  02EA  00F6               	movwf	??_Lcd_Init
  2961  02EB                     u1407:
  2962  02EB  0BF6               	decfsz	??_Lcd_Init,f
  2963  02EC  2AEB               	goto	u1407
  2964  02ED  0BF7               	decfsz	??_Lcd_Init+1,f
  2965  02EE  2AEB               	goto	u1407
  2966                           
  2967                           ;lcd_library.c: 92:   Lcd_Cmd(0x03);
  2968  02EF  3003               	movlw	3
  2969  02F0  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2970                           
  2971                           ;lcd_library.c: 94:   Lcd_Cmd(0b00111000);
  2972  02F5  3038               	movlw	56
  2973  02F6  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2974                           
  2975                           ;lcd_library.c: 95:   Lcd_Cmd(0b00001100);
  2976  02FB  300C               	movlw	12
  2977  02FC  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2978                           
  2979                           ;lcd_library.c: 96:   Lcd_Cmd(0b00000001);
  2980  0301  3001               	movlw	1
  2981  0302  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2982                           
  2983                           ;lcd_library.c: 97:   Lcd_Cmd(0b00000110);
  2984  0307  3006               	movlw	6
  2985  0308  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2986  030D                     l138:
  2987  030D  0008               	return
  2988  030E                     __end_of_Lcd_Init:
  2989                           
  2990                           	psect	text17
  2991  04C4                     __ptext17:	
  2992 ;; *************** function _Lcd_Cmd *****************
  2993 ;; Defined at:
  2994 ;;		line 55 in file "lcd_library.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  a               1    wreg     unsigned char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  a               1    5[COMMON] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, pclath, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3008 ;;      Params:         0       0       0       0       0
  3009 ;;      Locals:         1       0       0       0       0
  3010 ;;      Temps:          2       0       0       0       0
  3011 ;;      Totals:         3       0       0       0       0
  3012 ;;Total ram usage:        3 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		_Lcd_Port
  3017 ;; This function is called by:
  3018 ;;		_Lcd_Set_Cursor
  3019 ;;		_Lcd_Init
  3020 ;;		_Lcd_Clear
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _Lcd_Cmd
  3026  04C4                     _Lcd_Cmd:
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3030                           ;Lcd_Cmd@a stored from wreg
  3031  04C4  00F5               	movwf	Lcd_Cmd@a
  3032  04C5                     l1611:
  3033                           
  3034                           ;lcd_library.c: 55: void Lcd_Cmd(char a);lcd_library.c: 56: {;lcd_library.c: 57:  RE0 = 
      +                          0;
  3035  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  3036  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  3037  04C7  1009               	bcf	9,0	;volatile
  3038  04C8                     l1613:
  3039                           
  3040                           ;lcd_library.c: 58:  Lcd_Port(a);
  3041  04C8  0875               	movf	Lcd_Cmd@a,w
  3042  04C9  120A  118A  2398  120A  118A  	fcall	_Lcd_Port
  3043  04CE                     l1615:
  3044                           
  3045                           ;lcd_library.c: 59:  RE1 = 1;
  3046  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3047  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3048  04D0  1489               	bsf	9,1	;volatile
  3049  04D1                     l1617:
  3050                           
  3051                           ;lcd_library.c: 60:         _delay((unsigned long)((4)*(8000000/4000.0)));
  3052  04D1  300B               	movlw	11
  3053  04D2  00F4               	movwf	??_Lcd_Cmd+1
  3054  04D3  3062               	movlw	98
  3055  04D4  00F3               	movwf	??_Lcd_Cmd
  3056  04D5                     u1417:
  3057  04D5  0BF3               	decfsz	??_Lcd_Cmd,f
  3058  04D6  2CD5               	goto	u1417
  3059  04D7  0BF4               	decfsz	??_Lcd_Cmd+1,f
  3060  04D8  2CD5               	goto	u1417
  3061  04D9  0000               	nop
  3062  04DA                     l1619:
  3063                           
  3064                           ;lcd_library.c: 61:         RE1 = 0;
  3065  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  3066  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  3067  04DC  1089               	bcf	9,1	;volatile
  3068  04DD                     l126:
  3069  04DD  0008               	return
  3070  04DE                     __end_of_Lcd_Cmd:
  3071                           
  3072                           	psect	text18
  3073  0398                     __ptext18:	
  3074 ;; *************** function _Lcd_Port *****************
  3075 ;; Defined at:
  3076 ;;		line 12 in file "lcd_library.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  a               1    wreg     unsigned char 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  a               1    2[COMMON] unsigned char 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3090 ;;      Params:         0       0       0       0       0
  3091 ;;      Locals:         1       0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0
  3093 ;;      Totals:         1       0       0       0       0
  3094 ;;Total ram usage:        1 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    1
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_Lcd_Cmd
  3101 ;;		_Lcd_Init
  3102 ;;		_Lcd_Write_Char
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _Lcd_Port
  3108  0398                     _Lcd_Port:
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _Lcd_Port: [wreg]
  3112                           ;Lcd_Port@a stored from wreg
  3113  0398  00F2               	movwf	Lcd_Port@a
  3114  0399                     l1593:
  3115                           
  3116                           ;lcd_library.c: 12: void Lcd_Port(char a);lcd_library.c: 13: {;lcd_library.c: 14:  if(a 
      +                          & 1)
  3117  0399  1C72               	btfss	Lcd_Port@a,0
  3118  039A  2B9C               	goto	u1041
  3119  039B  2B9D               	goto	u1040
  3120  039C                     u1041:
  3121  039C  2BA1               	goto	l107
  3122  039D                     u1040:
  3123  039D                     l1595:
  3124                           
  3125                           ;lcd_library.c: 15:   RD0 = 1;
  3126  039D  1283               	bcf	3,5	;RP0=0, select bank0
  3127  039E  1303               	bcf	3,6	;RP1=0, select bank0
  3128  039F  1408               	bsf	8,0	;volatile
  3129  03A0  2BA4               	goto	l108
  3130  03A1                     l107:	
  3131                           ;lcd_library.c: 16:  else
  3132                           
  3133                           
  3134                           ;lcd_library.c: 17:   RD0 = 0;
  3135  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  3136  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  3137  03A3  1008               	bcf	8,0	;volatile
  3138  03A4                     l108:
  3139                           
  3140                           ;lcd_library.c: 19:  if(a & 2)
  3141  03A4  1CF2               	btfss	Lcd_Port@a,1
  3142  03A5  2BA7               	goto	u1051
  3143  03A6  2BA8               	goto	u1050
  3144  03A7                     u1051:
  3145  03A7  2BAA               	goto	l109
  3146  03A8                     u1050:
  3147  03A8                     l1597:
  3148                           
  3149                           ;lcd_library.c: 20:   RD1 = 1;
  3150  03A8  1488               	bsf	8,1	;volatile
  3151  03A9  2BAB               	goto	l110
  3152  03AA                     l109:	
  3153                           ;lcd_library.c: 21:  else
  3154                           
  3155                           
  3156                           ;lcd_library.c: 22:   RD1 = 0;
  3157  03AA  1088               	bcf	8,1	;volatile
  3158  03AB                     l110:
  3159                           
  3160                           ;lcd_library.c: 24:  if(a & 4)
  3161  03AB  1D72               	btfss	Lcd_Port@a,2
  3162  03AC  2BAE               	goto	u1061
  3163  03AD  2BAF               	goto	u1060
  3164  03AE                     u1061:
  3165  03AE  2BB1               	goto	l111
  3166  03AF                     u1060:
  3167  03AF                     l1599:
  3168                           
  3169                           ;lcd_library.c: 25:   RD2 = 1;
  3170  03AF  1508               	bsf	8,2	;volatile
  3171  03B0  2BB2               	goto	l112
  3172  03B1                     l111:	
  3173                           ;lcd_library.c: 26:  else
  3174                           
  3175                           
  3176                           ;lcd_library.c: 27:   RD2 = 0;
  3177  03B1  1108               	bcf	8,2	;volatile
  3178  03B2                     l112:
  3179                           
  3180                           ;lcd_library.c: 29:  if(a & 8)
  3181  03B2  1DF2               	btfss	Lcd_Port@a,3
  3182  03B3  2BB5               	goto	u1071
  3183  03B4  2BB6               	goto	u1070
  3184  03B5                     u1071:
  3185  03B5  2BB8               	goto	l113
  3186  03B6                     u1070:
  3187  03B6                     l1601:
  3188                           
  3189                           ;lcd_library.c: 30:   RD3 = 1;
  3190  03B6  1588               	bsf	8,3	;volatile
  3191  03B7  2BB9               	goto	l114
  3192  03B8                     l113:	
  3193                           ;lcd_library.c: 31:  else
  3194                           
  3195                           
  3196                           ;lcd_library.c: 32:   RD3 = 0;
  3197  03B8  1188               	bcf	8,3	;volatile
  3198  03B9                     l114:
  3199                           
  3200                           ;lcd_library.c: 34:     if(a & 16)
  3201  03B9  1E72               	btfss	Lcd_Port@a,4
  3202  03BA  2BBC               	goto	u1081
  3203  03BB  2BBD               	goto	u1080
  3204  03BC                     u1081:
  3205  03BC  2BBF               	goto	l115
  3206  03BD                     u1080:
  3207  03BD                     l1603:
  3208                           
  3209                           ;lcd_library.c: 35:   RD4 = 1;
  3210  03BD  1608               	bsf	8,4	;volatile
  3211  03BE  2BC0               	goto	l116
  3212  03BF                     l115:	
  3213                           ;lcd_library.c: 36:  else
  3214                           
  3215                           
  3216                           ;lcd_library.c: 37:   RD4 = 0;
  3217  03BF  1208               	bcf	8,4	;volatile
  3218  03C0                     l116:
  3219                           
  3220                           ;lcd_library.c: 39:     if(a & 32)
  3221  03C0  1EF2               	btfss	Lcd_Port@a,5
  3222  03C1  2BC3               	goto	u1091
  3223  03C2  2BC4               	goto	u1090
  3224  03C3                     u1091:
  3225  03C3  2BC6               	goto	l117
  3226  03C4                     u1090:
  3227  03C4                     l1605:
  3228                           
  3229                           ;lcd_library.c: 40:   RD5 = 1;
  3230  03C4  1688               	bsf	8,5	;volatile
  3231  03C5  2BC7               	goto	l118
  3232  03C6                     l117:	
  3233                           ;lcd_library.c: 41:  else
  3234                           
  3235                           
  3236                           ;lcd_library.c: 42:   RD5 = 0;
  3237  03C6  1288               	bcf	8,5	;volatile
  3238  03C7                     l118:
  3239                           
  3240                           ;lcd_library.c: 44:     if(a & 64)
  3241  03C7  1F72               	btfss	Lcd_Port@a,6
  3242  03C8  2BCA               	goto	u1101
  3243  03C9  2BCB               	goto	u1100
  3244  03CA                     u1101:
  3245  03CA  2BCD               	goto	l119
  3246  03CB                     u1100:
  3247  03CB                     l1607:
  3248                           
  3249                           ;lcd_library.c: 45:   RD6 = 1;
  3250  03CB  1708               	bsf	8,6	;volatile
  3251  03CC  2BCE               	goto	l120
  3252  03CD                     l119:	
  3253                           ;lcd_library.c: 46:  else
  3254                           
  3255                           
  3256                           ;lcd_library.c: 47:   RD6 = 0;
  3257  03CD  1308               	bcf	8,6	;volatile
  3258  03CE                     l120:
  3259                           
  3260                           ;lcd_library.c: 49:     if(a & 128)
  3261  03CE  1FF2               	btfss	Lcd_Port@a,7
  3262  03CF  2BD1               	goto	u1111
  3263  03D0  2BD2               	goto	u1110
  3264  03D1                     u1111:
  3265  03D1  2BD4               	goto	l121
  3266  03D2                     u1110:
  3267  03D2                     l1609:
  3268                           
  3269                           ;lcd_library.c: 50:   RD7 = 1;
  3270  03D2  1788               	bsf	8,7	;volatile
  3271  03D3  2BD5               	goto	l123
  3272  03D4                     l121:	
  3273                           ;lcd_library.c: 51:  else
  3274                           
  3275                           
  3276                           ;lcd_library.c: 52:   RD7 = 0;
  3277  03D4  1388               	bcf	8,7	;volatile
  3278  03D5                     l123:
  3279  03D5  0008               	return
  3280  03D6                     __end_of_Lcd_Port:
  3281                           
  3282                           	psect	text19
  3283  054B                     __ptext19:	
  3284 ;; *************** function _isr *****************
  3285 ;; Defined at:
  3286 ;;		line 76 in file "mcu1_master.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		None
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3300 ;;      Params:         0       0       0       0       0
  3301 ;;      Locals:         0       0       0       0       0
  3302 ;;      Temps:          2       0       0       0       0
  3303 ;;      Totals:         2       0       0       0       0
  3304 ;;Total ram usage:        2 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		Interrupt level 1
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           
  3314                           ;psect for function _isr
  3315  054B                     _isr:
  3316  054B                     i1l57:
  3317  054B  0871               	movf	??_isr+1,w
  3318  054C  008A               	movwf	10
  3319  054D  0E70               	swapf	??_isr,w
  3320  054E  0083               	movwf	3
  3321  054F  0EFE               	swapf	btemp,f
  3322  0550  0E7E               	swapf	btemp,w
  3323  0551  0009               	retfie
  3324  0552                     __end_of_isr:
  3325  007E                     btemp	set	126	;btemp
  3326  007E                     wtemp0	set	126
  3327                           
  3328                           	psect	intentry
  3329  0004                     __pintentry:	
  3330                           ;incstack = 0
  3331                           ; Regs used in _isr: []
  3332                           
  3333  0004                     interrupt_function:
  3334  007E                     saved_w	set	btemp
  3335  0004  00FE               	movwf	btemp
  3336  0005  0E03               	swapf	3,w
  3337  0006  00F0               	movwf	??_isr
  3338  0007  080A               	movf	10,w
  3339  0008  00F1               	movwf	??_isr+1
  3340  0009  120A  118A  2D4B   	ljmp	_isr
  3341                           
  3342                           	psect	config
  3343                           
  3344                           ;Config register CONFIG1 @ 0x2007
  3345                           ;	Oscillator Selection bits
  3346                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3347                           ;	Watchdog Timer Enable bit
  3348                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3349                           ;	Power-up Timer Enable bit
  3350                           ;	PWRTE = OFF, PWRT disabled
  3351                           ;	RE3/MCLR pin function select bit
  3352                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3353                           ;	Code Protection bit
  3354                           ;	CP = OFF, Program memory code protection is disabled
  3355                           ;	Data Code Protection bit
  3356                           ;	CPD = OFF, Data memory code protection is disabled
  3357                           ;	Brown Out Reset Selection bits
  3358                           ;	BOREN = ON, BOR enabled
  3359                           ;	Internal External Switchover bit
  3360                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3361                           ;	Fail-Safe Clock Monitor Enabled bit
  3362                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3363                           ;	Low Voltage Programming Enable bit
  3364                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3365                           ;	In-Circuit Debugger Mode bit
  3366                           ;	DEBUG = 0x1, unprogrammed default
  3367  2007                     	org	8199
  3368  2007  23D4               	dw	9172
  3369                           
  3370                           ;Config register CONFIG2 @ 0x2008
  3371                           ;	Brown-out Reset Selection bit
  3372                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3373                           ;	Flash Program Memory Self Write Enable bits
  3374                           ;	WRT = OFF, Write protection off
  3375  2008                     	org	8200
  3376  2008  3FFF               	dw	16383

Data Sizes:
    Strings     24
    Constant    10
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     26      50
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> s(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> s(BANK0[16]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_mostrar
    _mostrar->_sprintf
    _sprintf->___lwmod

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    5380
                                             25 BANK0      1     1      0
                           _Lcd_Init
                          _adc_to_5V
                            _mostrar
                              _setup
                            _spiInit
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mostrar                                              3     3      0    4471
                                             22 BANK0      3     3      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    20      5    2511
                                              5 BANK0     17    12      5
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                             10 COMMON     1     1      0
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     949
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0     279
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1    1011
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _adc_to_5V                                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     527
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     279
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     248
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _adc_to_5V
   _mostrar
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _setup
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      32       5       62.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3E      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 23:16:36 2021

                        _a 003E                          _s 0042                          pc 0002  
              _SSPSTATbits 0094                         l71 0255                         l82 0448  
                       _S1 007B                         l68 04F4                         _S2 0041  
                       _S3 0040                         fsr 0004        ___wmul@multiplicand 0074  
                      l110 03AB                        l111 03B1                        l120 03CE  
                      l112 03B2                        l121 03D4                        l113 03B8  
                      l114 03B9                        l202 054A                        l123 03D5  
                      l115 03BF                        l107 03A1                        l116 03C0  
                      l108 03A4                        l117 03C6                        l109 03AA  
                      l141 0520                        l213 053B                        l205 0557  
                      l118 03C7                        l126 04DD                        l119 03CD  
                      l135 04C3                        l138 030D                        l147 0353  
                      l323 00FC                        l340 049F                        l334 01A4  
                      l610 0397                        l338 0487                        l195 0505  
                      l620 0411                        l196 050A                        l199 0544  
                      l791 0532                        _RD0 0040                        _RD1 0041  
                      _RD2 0042                        _RE0 0048                        _RD3 0043  
                      _RE1 0049                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        u610 0529  
                      u611 0528                        u620 052F                        u621 052E  
                      u710 037F                        u630 0481                        u711 037E  
                      u631 0480                        u705 036F                        u730 0393  
                      u731 0392                        u715 037B                        u660 049B  
                      u725 0387                        u661 049A                        u645 0488  
                      u670 035C                        u671 035B                        u655 048F  
                      u690 036E                        u691 036D                        u685 0360  
                      u990 054A                        u991 0549                        _isr 054B  
                      fsr0 0004                        indf 0000                       l1301 0356  
                     l1311 036E                       l1303 035C                       l1313 037F  
                     l1305 035F                       l1321 0393                       l1315 0385  
                     l1307 0366                       l1317 0386                       l1309 036A  
                     l1511 0426                       l1503 0412                       l1319 038D  
                     l1601 03B6                       l1505 0418                       l1513 042E  
                     l1281 0531                       l1273 0522                       l1603 03BD  
                     l1611 04C5                       l1515 0435                       l1507 041E  
                     l1291 048E                       l1275 0523                       l1605 03C4  
                     l1613 04C8                       l1517 043A                       l1509 0421  
                     l1621 050C                       l1293 0495                       l1285 047B  
                     l1277 0529                       l1701 00B1                       l1461 04DE  
                     l1607 03CB                       l1615 04CE                       l1519 0442  
                     l1623 050F                       l1631 03D6                       l1295 049B  
                     l1287 047D                       l1279 052F                       l1703 00B5  
                     l1471 04EE                       l1463 04E1                       l1609 03D2  
                     l1617 04D1                       l1625 0515                       l1641 03F0  
                     l1633 03DE                       l1289 0481                       l1721 00EA  
                     l1705 00B9                       l1473 04F1                       l1465 04E5  
                     l1801 027C                       l1619 04DA                       l1627 0518  
                     l1299 0354                       l1643 03FA                       l1635 03E1  
                     l1731 0117                       l1723 00F0                       l1715 00C4  
                     l1707 00BD                       l1467 04E8                       l1491 0501  
                     l1459 0544                       l1811 029A                       l1803 0282  
                     l1661 04B8                       l1653 04A1                       l1629 051D  
                     l1645 0400                       l1637 03E8                       l1741 013A  
                     l1733 011D                       l1725 00F6                       l1709 00C2  
                     l1469 04EB                       l1493 0504                       l1485 04F6  
                     l1821 02B9                       l1813 029B                       l1805 0287  
                     l1663 04BD                       l1655 04A6                       l1671 0337  
                     l1647 0407                       l1639 03EC                       l1751 0181  
                     l1743 0141                       l1735 0124                       l1727 0107  
                     l1719 00E0                       l1487 04FD                       l1495 0553  
                     l1823 02BD                       l1815 02A0                       l1807 028A  
                     l1593 0399                       l1657 04AB                       l1665 030E  
                     l1649 040D                       l1753 0185                       l1745 0145  
                     l1737 0128                       l1729 0113                       l1681 0037  
                     l1673 0020                       l1489 04FF                       l1497 0533  
                     l1817 02B3                       l1809 0290                       l1595 039D  
                     l1771 02E1                       l1659 04B2                       l1667 0313  
                     l1747 014A                       l1739 0134                       l1691 0076  
                     l1683 003A                       l1675 0025                       l1755 018E  
                     l1499 0538                       l1819 02B4                       l1597 03A8  
                     l1773 02E7                       l1765 02C3                       l1669 032F  
                     l1749 017A                       l1757 01A0                       l1693 007A  
                     l1685 004A                       l1677 002B                       l1781 01CB  
                     l1599 03AF                       l1767 02C9                       l1847 009E  
                     l1687 004E                       l1679 0032                       l1791 0224  
                     l1783 01D7                       l1775 01A5                       l1769 02D2  
                     l1689 0063                       l1697 008A                       l1793 022D  
                     l1785 01E0                       l1777 01AD                       l1699 00A9  
                     l1795 0240                       l1787 01F4                       l1779 01B6  
                     l1789 0218                       l1797 0256                       l1799 0269  
                     ?_isr 0070                       STR_1 046B                       STR_2 046F  
                     STR_3 0473                       STR_4 0463                       STR_5 0477  
                     STR_6 0477                       u1000 04FD                       u1001 04FC  
                     u1010 0418                       u1011 0417                       u1100 03CB  
                     u1020 0434                       u1101 03CA                       u1021 0433  
                     u1110 03D2                       u1030 0448                       u1111 03D1  
                     u1031 0447                       u1040 039D                       u1200 031D  
                     u1120 03DE                       u1041 039C                       u1121 03DD  
                     u1050 03A8                       u1210 0341                       u1051 03A7  
                     u1060 03AF                       u1220 0353                       u1140 03F0  
                     u1300 00F6                       u1061 03AE                       u1221 0352  
                     u1141 03EF                       u1301 00F5                       u1070 03B6  
                     u1150 03FA                       u1310 0107                       u1230 002B  
                     u1071 03B5                       u1151 03F9                       u1135 03E2  
                     u1311 0106                       u1231 002A                       u1080 03BD  
                     u1320 011D                       u1240 004A                       u1081 03BC  
                     u1321 011C                       u1241 0049                       u1090 03C4  
                     u1170 040D                       u1330 0134                       u1250 008A  
                     u1091 03C3                       u1171 040C                       u1155 03F6  
                     u1331 0133                       u1315 0103                       u1251 0089  
                     u1180 04A6                       u1340 013A                       u1260 00B9  
                     u1181 04A5                       u1165 0401                       u1341 0139  
                     u1261 00B8                       u1190 04B8                       u1350 018E  
                     u1270 00DF                       u1407 02EB                       u1191 04B7  
                     u1351 018D                       u1271 00DE                       u1360 01A0  
                     u1280 00EA                       u1417 04D5                       u1361 019F  
                     u1281 00E9                       u1290 00F0                       u1291 00EF  
                     u1275 00DB                       u1377 051A                       u1387 02CD  
                     u1397 02DC                       i1l57 054B          ?_Lcd_Write_String 0075  
                     _main 0256                       btemp 007E                       start 000C  
       ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 04DE                      ??_isr 0070  
                    ?_main 0070                      _ANSEL 0188            __end_of___lwdiv 0398  
          __end_of___lwmod 0412                      _PORTB 0006                      _PORTD 0008  
  __size_of_Lcd_Set_Cursor 0024                      _TRISB 0086                      _TRISD 0088  
                    _TRISE 0089            __end_of_dpowers 0463            __end_of_isdigit 0533  
                    _setup 04DE                      pclath 000A            __end_of_spiInit 050B  
          __end_of_spiRead 053C            __end_of_mostrar 0256                      status 0003  
                    wtemp0 007E            __end_of_sprintf 01A5           __end_of_Lcd_Init 030E  
         __end_of_Lcd_Port 03D6            __initialization 000F               __end_of_main 02C3  
                   ??_main 0039                     ?_setup 0070                     _ANSELH 0189  
                   _INTCON 000B                  ??_Lcd_Cmd 0073    __size_of_Lcd_Write_Char 0016  
                   _TRISC3 043B                     _TRISC5 043D                     _SSPBUF 0013  
                   _SSPCON 0014                     ___wmul 047B                     _decima 003A  
                ??___lwdiv 0076                  ??___lwmod 007A                     _entero 003C  
                ??_isdigit 0072                     saved_w 007E           __end_of_spiWrite 0558  
                ??_spiInit 0075                  ??_spiRead 0072                  ??_mostrar 0036  
                ??_sprintf 002A            Lcd_Set_Cursor@a 0078            Lcd_Set_Cursor@b 0076  
  __end_of__initialization 0019         __size_of_adc_to_5V 0037             __pcstackCOMMON 0070  
            __end_of_setup 04F5             _Lcd_Set_Cursor 04A0                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070               sprintf@width 0032                    ??_setup 0072  
               __pbssBANK0 003A                 __pmaintext 0256                    ?___wmul 0072  
               __pintentry 0004    __size_of_spiReceiveWait 0007  __size_of_Lcd_Write_String 0046  
   __end_of_Lcd_Set_Cursor 04C4          __end_of_adc_to_5V 0449                 ??_Lcd_Init 0076  
               ??_Lcd_Port 0072                    _SSPSTAT 0094                 __stringtab 0449  
           _Lcd_Write_Char 050B                    _Lcd_Cmd 04C4                  ?_spiWrite 0070  
          __size_of___wmul 0025                    ___lwdiv 0354                    ___lwmod 03D6  
          ?_Lcd_Set_Cursor 0076                    __ptext1 0552                    __ptext2 0533  
                  __ptext3 0544                    __ptext4 04F5                    __ptext5 04DE  
                  __ptext6 01A5                    __ptext7 001D                    __ptext8 0521  
                  __ptext9 047B                    _dpowers 0459                    _isdigit 0521  
             __size_of_isr 0007                    _spiInit 04F5                    _spiRead 0533  
                  _mostrar 01A5                    _sprintf 001D                    clrloop0 053D  
   __end_of_Lcd_Write_Char 0521       end_of_initialization 0019                 ??_spiWrite 0072  
                Lcd_Port@a 0072                  _PORTBbits 0006                  _TRISCbits 0087  
              spiWrite@dat 0072            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075  
        Lcd_Write_String@i 0020             _spiReceiveWait 0544             __end_of___wmul 04A0  
         _Lcd_Write_String 030E        start_initialization 000F                __end_of_isr 0552  
        __size_of_Lcd_Init 004B          __size_of_Lcd_Port 003E     __end_of_spiReceiveWait 054B  
                 ??___wmul 0076            Lcd_Write_Char@a 0074                __pbssCOMMON 007B  
                ___latbits 0002              __pcstackBANK0 0020                  _adc_to_5V 0412  
                 ?_Lcd_Cmd 0070                sprintf@flag 002F                sprintf@prec 002E  
         ___lwdiv@dividend 0074            ?_spiReceiveWait 0070           ??_Lcd_Set_Cursor 0077  
                 ?___lwdiv 0072                   ?___lwmod 0020          __size_of_spiWrite 0006  
                __pstrings 0449                   ?_isdigit 0070                   ?_spiInit 0072  
                 ?_spiRead 0070                   ?_mostrar 0070                 ?_adc_to_5V 0070  
         ___lwdiv@quotient 0077                   ?_sprintf 0025             __size_of_setup 0017  
     spiInit@sTransmitEdge 0074          interrupt_function 0004             ___wmul@product 0076  
                clear_ram0 053C                   _PIE1bits 008C         spiInit@sDataSample 0072  
                 Lcd_Cmd@a 0075                __stringbase 0458          ___wmul@multiplier 0072  
         ??_Lcd_Write_Char 0073                   _Lcd_Init 02C3                   _Lcd_Port 0398  
 __end_of_Lcd_Write_String 0354           __size_of_Lcd_Cmd 001A           __size_of___lwdiv 0044  
         __size_of___lwmod 003C         __end_of__stringtab 0459                _isdigit$921 0072  
               sprintf@val 0030           __size_of_isdigit 0012            ___lwdiv@divisor 0072  
          ___lwdiv@counter 0079                ??_adc_to_5V 0072                   __ptext10 03D6  
                 __ptext11 0354                   __ptext12 030E                   __ptext13 050B  
                 __ptext14 04A0                   __ptext15 0412                   __ptext16 02C3  
                 __ptext17 04C4                   __ptext18 0398                   __ptext19 054B  
         __size_of_spiInit 0016           __size_of_spiRead 0009           __size_of_mostrar 00B1  
         __size_of_sprintf 0188              __size_of_main 006D                   _spiWrite 0552  
             spiInit@sType 0075          spiInit@sClockIdle 0073                 _INTCONbits 000B  
                 isdigit@c 0073                   intlevel1 0000                  sprintf@ap 002D  
                sprintf@sp 0034           ___lwmod@dividend 0022           ??_spiReceiveWait 0072  
                stringcode 0453         Lcd_Set_Cursor@temp 0079                   sprintf@c 0035  
                 sprintf@f 0025            ___lwmod@divisor 0020            ___lwmod@counter 0024  
                 stringdir 0453                   stringtab 0449  
